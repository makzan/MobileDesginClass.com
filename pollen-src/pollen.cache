((3) 0 () 2 ("language-swift" "language-objectivec") () (h ! (equal) ((p+ #"/home/ubuntu/workspace/pollen-src/summary.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/summary.html.pm")) (doc c root c (c h1 c (u . "Summary"))) (mod-time . 1430976117)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/index.html.pm")) (doc c root c (c h1 c (u . "Kitchen Timer")) c (c p c (u . "In this example, we’re going to build a timer. This timer is particular useful in kitchen. Imagine now we are cooking a fish and want to get an alert after 2 minutes 30 seconds. We can launch the app and set up the timer in few taps. Then we will get alert without worrying getting the fish over-cooked.")) c (c p c (u . "- Auto Layout") c (q br) c (u . "- Local Notification") c (q br) c (u . "- Extension")) c (c p c (u . "Step 1: ") c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step1.html"))) c (u . "Preparing the project.")) c (q br) c (u . "Step 2: ") c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step2-auto-layout.html"))) c (u . "Setup the Auto Layout.")) c (q br) c (u . "Step 3: ") c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step3-local-notification.html"))) c (u . "Scheduling Local Notification.")))) (mod-time . 1432088799)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step3-local-notification.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step3-local-notification.html.pm")) (doc c root c (c h1 c (u . "Step 3—Local Notification")) c (c p c (u . "We use LocalNotification to schedule the time up message.")) c (c aside c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%2012.19.57%20PM.png") (alt "Prompting user for allowing notification."))) c (c figcaption c (u . "Prompting user for allowing notification.")))) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/IMG_0274.jpg") (alt "Properties for notification action."))) c (c figcaption c (u . "Properties for notification action."))) c (c pre c (c code c (c (c class c (? . 0))) c (u . "UIApplication.sharedApplication().scheduleLocalNotification(notification)"))) c (c pre c (c code c (c (c class c (? . 0))) c (c p c (u . "func registerNotification() {") c (q br) c (u . "    ") c (u . "// type") c (q br) c (u . "    ") c (u . "let type = UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound")) c (c p c (u . "// actions") c (q br) c (u . "    ") c (u . "let action1 = UIMutableUserNotificationAction()") c (q br) c (u . "    ") c (u . "action1.identifier = “EXTRA_30S”") c (q br) c (u . "    ") c (u . "action1.title = “+30s”") c (q br) c (u . "    ") c (u . "action1.activationMode = UIUserNotificationActivationMode.Background") c (q br) c (u . "    ") c (u . "action1.destructive = false") c (q br) c (u . "    ") c (u . "action1.authenticationRequired = false")) c (c p c (u . "// action category") c (q br) c (u . "    ") c (u . "let category = UIMutableUserNotificationCategory()") c (q br) c (u . "    ") c (u . "category.identifier = “EXTRA_TIME_CATEGORY”") c (q br) c (u . "    ") c (u . "category.setActions([action1], forContext: UIUserNotificationActionContext.Default)") c (q br) c (u . "    ") c (u . "category.setActions([action1], forContext: UIUserNotificationActionContext.Minimal)")) c (c p c (u . "// setting") c (q br) c (u . "    ") c (u . "let setting = UIUserNotificationSettings(forTypes: type, categories: [category])")) c (c p c (u . "// really register") c (q br) c (u . "    ") c (u . "UIApplication.sharedApplication().registerUserNotificationSettings(setting)") c (q br) c (u . "}")) c (c p c (u . "// MARK: - Scheduling notification")) c (c p c (u . "func scheduleNotificationWithInterval(seconds:NSTimeInterval) {") c (q br) c (u . "    ") c (u . "let notification = UILocalNotification()") c (q br) c (u . "    ") c (u . "notification.fireDate = NSDate(timeIntervalSinceNow: seconds)") c (q br) c (u . "    ") c (u . "notification.timeZone = NSTimeZone.defaultTimeZone()") c (q br) c (u . "    ") c (u . "notification.alertBody = “Time’s up”") c (q br) c (u . "    ") c (u . "notification.alertAction = “Dismiss”") c (q br) c (u . "    ") c (u . "notification.soundName = UILocalNotificationDefaultSoundName") c (q br) c (u . "    ") c (u . "notification.applicationIconBadgeNumber = 0") c (q br) c (u . "    ") c (u . "notification.category = “EXTRA_TIME_CATEGORY”")) c (c p c (u . "UIApplication.sharedApplication().scheduleLocalNotification(notification)") c (q br) c (u . "}")) c (c p c (u . "// MARK: - Managing existing notifications")) c (c p c (u . "func hasNotifications() -> Bool {") c (q br) c (u . "    ") c (u . "return UIApplication.sharedApplication().scheduledLocalNotifications.count > 0") c (q br) c (u . "}")) c (c p c (u . "func removeAllNotifications() {") c (q br) c (u . "    ") c (u . "UIApplication.sharedApplication().cancelAllLocalNotifications()") c (q br) c (u . "}")))) c (c p c (u . "At last, we prompt the user for registration.")) c (c pre c (c code c (c (c class c (? . 0))) c (u . "// register notification") c (q br) c (u . "LocalNotificationManager.sharedInstance.registerNotification()"))) c (c p c (c btw c (c li c (u . "There is no difference in user’s view for ") c (c em c (u . "remote notification")) c (u . " and ") c (c em c (u . "local notification"))) c (q br) c (c li c (u . "We should carefully design when to prompt user for the notification permission. Asking the permission in wrong timing may result in deny.")) c (q br) c (c li c (u . "There is no way to programmatically trigger the prompt again after deny. User need to manuanlly turn on notification for your app inside the OS setting app."))))) (mod-time . 1432087421)) ((p+ #"/home/ubuntu/workspace/pollen-src/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.html.pm")) (doc c root c (c h1 c (u . "Mobile Design Class")) c (c p c (u . "You’ll find 3 topics in this ") c (c em c (u . "mobile design class")) c (u . ". They are ") c (c strong c (u . "mebile web design")) c (u . ", ") c (c strong c (u . "iOS app development")) c (u . " and ") c (c strong c (u . "Mobile UI Design")) c (u . ". You may read the online version for ") c (c em c (u . "free")) c (u . ", or you may buy the eBook edition.")) c (c p c (u . "The course was originally hosted on ") c (c a c (q (href "http://makzan.net")) c (u . "makzan.net")) c (u . ". I’m migrating and updating the content into this domain.")) c (c p c (u . "Why there are 3 topics? It’s because they are deeply connected. If you want to design for mobile screens, you need the native UI components to build iOS apps. You need mobile web design skills to create hybrid app that runs both native code and web view code. You also need to learn mobile user interface design to provide a better user experience.")) c (c ol c (c li c (c a c (q (href "/ios-app/")) c (u . "Section 1—iOS App Development"))) c (c li c (c a c (q (href "/mobile-web/")) c (u . "Section 2—Mobile Web Design"))) c (c li c (c a c (q (href "#")) c (u . "Section 3—Mobile UI Design"))))) (mod-time . 1432087782)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/toc.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/toc.html.pm")) (doc c root c (c h1 c (u . "Table of Content—iOS app development")) c (c h2 c (c (c id c (u . "beginning-level"))) c (c a c (c (c href c (u . "#beginning-level"))) c (u . "Beginning level"))) c (c p c (c h2 c (c (c id c (u . "advanced-topics"))) c (c a c (c (c href c (u . "#advanced-topics"))) c (u . "Advanced topics"))) c (c ol c (c li c (c a c (q (href "/ios-app/kitchen-timer/")) c (u . "2.1 Kitchen Timer")))))) (mod-time . 1431943335)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/pragma-mark.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/pragma-mark.html.pm")) (doc c root c (c h1 c (u . "Pragma mark in swift")) c (c p c (u . "Pragma mark allows easily seperate methods into groups, in both source code and navigation panel.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%205.58.17%20PM.png") (alt "Navigation panel with pragma marks defined."))) c (c figcaption c (u . "Navigation panel with pragma marks defined."))) c (c p c (u . "The Pragma Mark in Objective-C:")) c (c pre c (c code c (c (c class c (? . 1))) c (u . "#pragma mark"))) c (c p c (u . "The Pragma Mark in Swift:")) c (c pre c (c code c (c (c class c (? . 0))) c (u . "// MARK:"))) c (c p c (u . "For example, the horizontal line can be presented by:")) c (c pre c (c code c (c (c class c (? . 0))) c (u . "// MARK: -"))) c (c p c (u . "Title following an horizontal line would be:")) c (c pre c (c code c (c (c class c (? . 0))) c (u . "// MARK: - Text Goes Here")))) (mod-time . 1431943179)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/document-title.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/document-title.html.pm")) (doc c root c (c h1 c (u . "Document title")) c (c p c (u . "First thing is the title of the document. Title of the document is used in the following places:")) c (c ul c (c li c (u . "Home screen")) c (q br) c (c li c (u . "Bookmark")) c (q br) c (c li c (u . "History log")) c (q br) c (c li c (u . "Tab")) c (q br) c (c li c (u . "Back button in browser")) c (q br) c (c li c (u . "Social network"))) c (c aside c (c figure c (q img ((src "http://makzan.net/assets/mobile-web-design/fb-sharing-6d9154db003a1668e3130cb407dd988d.png") (alt "Document title appears in the facebook sharing box."))) c (c figcaption c (u . "Document title appears in the facebook sharing box.")))) c (c p c (u . "This screen shot of sharing a webpage on Facebook. Facebook fetches the document title when it is shared.")) c (c p c (u . "Actually Facebook searches for the ") c (c code c (u . "og")) c (u . " meta tag to restrieve the HTML document’s title and other information. If the ") c (c code c (u . "og")) c (u . " meta is missing, Facebook searches for the document title and heanding.")) c (c aside c (c figure c (q img ((src "http://makzan.net/assets/mobile-web-design/macao-gov-history-dca0a7b80f9f6bd8b0edfadfa7c3c49c.png") (alt "Same document title on every page"))) c (c figcaption c (u . "Same document title on every page")))) c (c p c (u . "This screenshot shows how confuse it is when every page shares the same document title.")) c (c p c (u . "Imagine now your reader would like to go back several pages in the history. For sure the reader will fails to identify which history item is the page that he is finding, because every page has the same title.")) c (c aside c (c figure c (q img ((src "http://makzan.net/assets/mobile-web-design/makzan-net-history-e95b6f2bf8146faa685b4230819b5eb2.png") (alt "Different document title for each page"))) c (c figcaption c (u . "Different document title for each page")))) c (c p c (u . "In this screenshot, on the other hand, shows the website with corresponding title set for each page. Every page has set a title that describes what the page is about. It also contains the site name so reader can easily identify these pages are from the same website when viewing them in the history log.")) c (c p c (u . "[We need another paragraph here to explain and conclude this topic, We need another paragraph here to explain and conclude this topic. We need another paragraph here to explain and conclude this topic, We need another paragraph here to explain and conclude this topic. We need another paragraph here to explain and conclude this topic, We need another paragraph here to explain and conclude this topic. ]"))) (mod-time . 1431576565)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step1.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step1.html.pm")) (doc c root c (c h1 c (u . "Step 1")) c (c p c (u . "In this step, we create the basic user interface.")) c (c ol c (c p c (c li c (u . "Download the images from the ") c (c a c (q (href "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Interfaces%20for%20Kitchen%20Timer.zip")) c (u . "this link")) c (u . ".")) c (q br) c (c li c (u . "Crate new XCode project, with ") c (c em c (u . "swift")) c (u . " and ") c (c em c (u . "universal")) c (u . " option"))) c (c p c (c aside c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-17%20at%209.10.50%20PM.png") (alt "Main.storyboard"))) c (c figcaption c (u . "Main.storyboard")))) c (c li c (u . "Setup the interface like the following."))) c (c p c (c li c (c p c (u . "Create outlet.")) c (c pre c (c code c (c (c class c (? . 0))) c (u . "@IBOutlet weak var startButton: UIButton!") c (q br) c (u . "@IBOutlet weak var stopButton: UIButton!")))) c (q br) c (c li c (c p c (u . "Define 2 functions that controls the interface visibility.")) c (c pre c (c code c (c (c class c (? . 0))) c (c p c (u . "// MARK - UI Visibility")) c (c p c (u . "func showRunningUI() {") c (q br) c (u . "    ") c (u . "stopButton.hidden = false") c (q br) c (u . "    ") c (u . "startButton.hidden = true") c (q br) c (u . "}")) c (c p c (u . "func showPrepareUI() {") c (q br) c (u . "    ") c (u . "stopButton.hidden = true") c (q br) c (u . "    ") c (u . "startButton.hidden = false") c (q br) c (u . "}")))))) c (c p c (c li c (c p c (u . "Then we define the following button handler.")) c (c pre c (c code c (c (c class c (? . 0))) c (c p c (u . "@IBAction func startTimer(sender: AnyObject) {") c (q br) c (u . "    ") c (u . "showRunningUI()") c (q br) c (u . "}")) c (c p c (u . "@IBAction func cancelTimer(sender: AnyObject) {") c (q br) c (u . "    ") c (u . "showPrepareUI()") c (q br) c (u . "}"))))) c (q br) c (c li c (u . "At last, we setup the interface at the viewDidLoad") c (c pre c (c code c (c (c class c (? . 0))) c (u . "override func viewDidLoad() {") c (q br) c (u . "    ") c (u . "super.viewDidLoad()") c (q br) c (u . "    ") c (u . "// Do any additional setup after loading the view, typically from a nib.") c (q br) c (u . "    ") c (u . "showPrepareUI()") c (q br) c (u . "}"))))))) (mod-time . 1432092439)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/summary.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/summary.html.pm")) (doc c root c (c h1 c (u . "iOS App Development—Summary")) c (c p c (u . "We had learned a lot techniques on building iOS app. Spceifically, we built apps with different UI components. We learned the iOS delegation pattern. We learned the multi-views management with ") c (c code c (u . "UINavigationController")) c (u . " and ") c (c code c (u . "UITabBarController")) c (u . ".")) c (c p c (u . "This is the end of the ") c (c em c (u . "iOS App Development")) c (u . " section. In next section, we will explore building mobile web pages."))) (mod-time . 1431575735)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/index.html.pm")) (doc c root c (c h1 c (u . "Section 1—iOS App Development")) c (c p c (u . "It’s not that difficult to build an iOS application. The latest XCode makes app development straightforward.")) c (c p c (u . "In this section, we will explore different examples that introduces essential iOS app building skills, from easy to more advonce ones."))) (mod-time . 1431531870)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/index.html.pm")) (doc c root c (c h1 c (u . "Section 2—Mobile Web Design")) c (c figure c (q img ((src "http://makzan.net/assets/mobile-web-design/mobile-web-design-52d8314974f7dd3ee1dc7ec529886937.png") (alt "Mobile Web Design"))) c (c figcaption c (u . "Mobile Web Design"))) c (c p c (u . "In this course, we will explore different techniques to create our content in mobile web. We will focus on content strategy for mobile devices. We will try to fit our layout into small screen. We will make the form inputs fit the virtual keyboards in touch devices. We will fetch device data such as raw touches events and device orientation. Finally, we will pack and deploy our web."))) (mod-time . 1431531859)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/another-autolayout-example.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/another-autolayout-example.html.pm")) (doc c root c (c h1 c (u . "Another AutoLayout example"))) (mod-time . 1432005311)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/setting-up-the-development-environment.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/setting-up-the-development-environment.html.pm")) (doc c root c (c h1 c (u . "Setting up the development environment")) c (c p c (u . "How can we get started?")) c (c p c (u . "We need to install some softwares. We need web browsers to run the web. We’ll need Google Chrome, Mozilla Firefox and Apple Safari to test our web pages.")) c (c p c (u . "Just the browsers? How about the editor?")) c (c aside c (u . "There are free alternatives: Bracket, Atom.io, or online IDE such as c9.io and Nitrous.")) c (c p c (u . "Any plain text code editor would work. IDE such as Dreamweaver may be used but they are not required. For me, I would use Sublime Text because of the multiple-cursors feature."))) (mod-time . 1431053228)) ((p+ #"/home/ubuntu/workspace/pollen-src/logs/2015-05-18-ios-app.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/logs/2015-05-18-ios-app.html.pm")) (doc c root c (c h1 c (u . "Start writing the iOS apps development examples")) c (c p c (u . "I’m working on the 1st iOS apps dev example here. It’s the Kitchen Timer app which makes use of the AutoLayout, LocalNotification and Today extension.")) c (c p c (c history c (u . "2015-05-18: First draft.")))) (mod-time . 1431920710)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/index.html.pm")) (doc c root c (c h1 c (u . "Chapter 2")) c (c p c (u . "In this chapter, we focus on the fundamental of the web. It’s so fundamental that these techniques apply to both desktop web and mobile web design. It’s so fundamental that we often overlook and forget about it."))) (mod-time . 1431074159)) ((p+ #"/home/ubuntu/workspace/pollen-src/logs/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/logs/index.html.pm")) (doc c root c (c h1 c (u . "Logs")) c (c p c (u . "Here you’ll find the update logs for this website.")) c (c p c (c a c (q (href "/logs/2015-05-18-ios-app.html")) c (u . "2015-05-18: Start writing iOS app examples.")) c (q br) c (c a c (q (href "/logs/2015-05-01-mobile-web-design.html")) c (u . "2015-05-01:Start writing iOS app examples.")))) (mod-time . 1431921108)) ((p+ #"/home/ubuntu/workspace/pollen-src/index.ptree" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/index.ptree")) (doc q pagetree-root index.html (ios-app/index.html ios-app/toc.html ios-app/example-1.html ios-app/pragma-mark.html (ios-app/kitchen-timer/index.html ios-app/kitchen-timer/step1.html ios-app/kitchen-timer/step2-auto-layout.html ios-app/kitchen-timer/step3-local-notification.html ios-app/kitchen-timer/another-autolayout-example.html) ios-app/pull-to-refresh.html ios-app/apple-watch.html ios-app/summary.html) (mobile-web/index.html (mobile-web/chapter-1/index.html mobile-web/chapter-1/setting-up-the-development-environment.html mobile-web/chapter-1/testing-environment.html) (mobile-web/chapter-2/index.html mobile-web/chapter-2/document-title.html mobile-web/chapter-2/content-strategy.html)) summary.html (logs/index.html logs/2015-05-18-ios-app.html logs/2015-05-01-mobile-web-design.html)) (mod-time . 1432005346)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/example-1.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/example-1.html.pm")) (doc c root c (c h1 c (u . "Label and Input")) c (c p c (u . "We take a look at the text input and display in this example.")) c (c div c (c div c (c a c (q (data-lang "objc")) c (u . "Obj-C")) c (c a c (q (data-lang "swift")) c (u . "Swift"))) c (c pre c (c code c (c (c class c (? . 1))) c (u . "NSString *value = [label text];") c (q br) c (u . "NSLog(value);"))) c (c pre c (c code c (c (c class c (? . 0))) c (u . "var value:string = label.text") c (q br) c (u . "NSLog(value);"))))) (mod-time . 1431573083)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/content-strategy.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-2/content-strategy.html.pm")) (doc c root c (c h1 c (u . "Content strategy")) c (c p c (u . "Why we should care about content first?")) c (c p c (u . "Because no matter how the web and app present our content, the content itself doesn’t change. So the first thing we should focus is the content structure.")) c (c p c (u . "By structure, I meant the important order of our content. I meant the correct headings for our content. The informative HTML tags we applied to our content."))) (mod-time . 1431057275)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/index.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/index.html.pm")) (doc c root c (c h1 c (u . "Chapter 1–Getting started")) c (c ol c (c li c (c a c (q (href "/chapter-1/setting-up-the-development-environment.html")) c (u . "Setting up the development environment"))) c (c li c (c a c (q (href "/chapter-1/testing-environment.html")) c (u . "Testing environment"))) c (c li c (c a c (q (href "/chapter-1/where-to-reference-documentations.html")) c (u . "Where to reference documentations"))))) (mod-time . 1431265038)) ((p+ #"/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/testing-environment.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/mobile-web/chapter-1/testing-environment.html.pm")) (doc c root c (c h1 c (u . "Testing environment")) c (c p c (u . "How we test our website?")) c (c h2 c (q (id "simulator")) c (c a c (c (c href c (u . "#simulator"))) c (u . "Testing in simulator"))) c (c p c (u . "We will also need to install emulator for both iOS and android system.")) c (c aside c (c figure c (q img ((src "http://makzan.net/assets/introducing-web-design/test-in-ios-simulator-5911e7a217893f6a6e245d0ce3281477.png") (alt "Screenshot of iOS Simulator."))) c (c figcaption c (u . "Screenshot of iOS Simulator.")))) c (c p c (u . "The iOS simulator can be installed via the XCode, the apple development toolkit. The android emulator, on the other hand, can be installed via the android SDK. Alternatively, 3rd party emulator may be used, such as ") c (c a c (q (href "https://www.genymotion.com/")) c (u . "genymotion")) c (u . ".")) c (c h2 c (q (id "real-devices")) c (c a c (c (c href c (u . "#real-devices"))) c (u . "Testing in real devices"))) c (c aside c (c figure c (q img ((src "http://makzan.net/assets/introducing-web-design/devices-photo-by-jeremy-keith-5682012a4b28526a50ecb12b044c1855.png") (alt "Testing website in multiple devices. Photo taken by Jeremy Keith."))) c (c figcaption c (u . "Testing website in multiple devices. Photo taken by Jeremy Keith.")))) c (c p c (u . "Beside simulating our web in the mobile simulator, we need to have real devices to further test it.")) c (c p c (u . "Not only because simulator cannot simulate all the things, but also because holding the web on hand is important. We need the feeling of scrolling the screen, tapping on links and buttons, and inputting the form value with the virtual keyboard."))) (mod-time . 1431510376)) ((p+ #"/home/ubuntu/workspace/pollen-src/logs/2015-05-01-mobile-web-design.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/logs/2015-05-01-mobile-web-design.html.pm")) (doc c root c (c h1 c (u . "Start writing the Mobile Web Design")) c (c p c (u . "I’m start migrating the mobile web design course from makzan.net to here. This site will be the central place for all my mobile design writings, including both web design and app development.")) c (c p c (u . "I believe both mobile app developers and traiditonal web designers need to learn these 2 aspects—") c (c strong c (u . "Mobile web design")) c (u . " and ") c (c strong c (u . "native app development")) c (u . ".")) c (c p c (c history c (u . "2015-05-01: First draft.")))) (mod-time . 1431920464)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/pull-to-refresh.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/pull-to-refresh.html.pm")) (doc c root c (c h1 c (u . "Pull to refresh with UIRefreshControl")) c (c p c (u . "Step 1: Enable the ") c (c em c (u . "Refreshing")) c (u . " option in any ") c (c code c (u . "UIScrollView")) c (u . " in Storyboard.")) c (c figure c (q img ((src "http://makzan.net/assets/ios-dev-scrapbook/table-view-refreshing-enabled-8c1dbb2ed1734edcd6a38345409a997e.png") (alt "Table view refreshing enabled in Storyboard."))) c (c figcaption c (u . "Table view refreshing enabled in Storyboard."))) c (c p c (u . "Step 2: Setup the refresh logic that tracks the ") c (c code c (u . "UIControlEventValueChanged")) c (u . " event:")) c (c pre c (c code c (c (c class c (? . 1))) c (u . "[self.refreshControl addTarget:self") c (q br) c (u . "                        ") c (u . "action:@selector(refreshNews:)") c (q br) c (u . "              ") c (u . "forControlEvents:UIControlEventValueChanged];"))) c (c p c (u . "Step 3: Implement the selector with logic that’s executed when user pulls and refreshes the view.")) c (c pre c (c code c (c (c class c (? . 1))) c (u . "- (void) refreshNews: (id)selector {") c (q br) c (u . "  ") c (u . "// logic here to refresh the table view.") c (q br) c (u . "}")))) (mod-time . 1431591936)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/apple-watch.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/apple-watch.html.pm")) (doc c root c (c h1 c (u . "Apple Watch")) c (c p c (u . "What we can do on ") c (c em c (u . "Apple Watch")) c (u . "?")) c (c p c (u . "Basically 3 thing:")) c (c p c (u . "- Notification") c (q br) c (u . "- Glimpse") c (q br) c (u . "- App")) c (c h2 c (q (id "notification")) c (c a c (c (c href c (u . "#notification"))) c (u . "Notification"))) c (c p c (u . "The iOS automatically routes all notifications to the watch, even that app hasn’t added any Apple Watch specific functionality.")) c (c h2 c (q (id "glimpse")) c (c a c (c (c href c (u . "#glimpse"))) c (u . "Glimpse"))) c (c p c (u . "A glimpse is a non-interaction view that provides essential information for the watch user.")) c (c h2 c (q (id "app")) c (c a c (c (c href c (u . "#app"))) c (u . "App"))) c (c p c (u . "App is like entension of the iPhone app, where we call it ") c (c strong c (u . "master app")) c (u . "."))) (mod-time . 1431664894)) ((p+ #"/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step2-auto-layout.html.pm" . unix) h ! (equal) (metas h ! (equal) (here-path . "/home/ubuntu/workspace/pollen-src/ios-app/kitchen-timer/step2-auto-layout.html.pm")) (doc c root c (c h1 c (u . "Step 2—Adding Auto Layout")) c (c p c (u . "After preparing the basic user interface, we prepare the AutoLayout to make the interface response to different screen sizes. There are different size classes that we can define individual layout rules to each of them. By default, we start at ") c (c em c (u . "any")) c (u . " width and ") c (c em c (u . "any")) c (u . " height.")) c (c aside c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-17%20at%209.04.50%20PM.png") (alt "Interface is cropped if we don’t setup the Auto Layout."))) c (c figcaption c (u . "Interface is cropped if we don’t setup the Auto Layout.")))) c (c h2 c (c (c id c (u . "size-classes"))) c (c a c (c (c href c (u . "#size-classes"))) c (u . "Size Classes"))) c (c p c (u . "My Piority on setting Auto Layout for different sizes.")) c (c p c (u . "1. We begin with ") c (c em c (u . "any")) c (u . " width ") c (c em c (u . "any")) c (u . " height.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.01%20PM.png") (alt "All layout starts at any width and any height."))) c (c figcaption c (u . "All layout starts at any width and any height."))) c (c p c (u . "2. ") c (c em c (u . "Compact")) c (u . " width ") c (c em c (u . "any")) c (u . " height.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.08%20PM.png") (alt "Then we work on the compact width and any height."))) c (c figcaption c (u . "Then we work on the compact width and any height."))) c (c p c (u . "3. ") c (c em c (u . "Any")) c (u . " width ") c (c em c (u . "compact")) c (u . " height.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.11%20PM.png") (alt "Any width and compact height."))) c (c figcaption c (u . "Any width and compact height."))) c (c p c (u . "4. ") c (c em c (u . "Regular")) c (u . " width and ") c (c em c (u . "regular")) c (u . " height.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.24%20PM.png") (alt "Regular for iPad."))) c (c figcaption c (u . "Regular for iPad."))) c (c h2 c (c (c id c (u . "constraints"))) c (c a c (c (c href c (u . "#constraints"))) c (u . "Constraints"))) c (c p c (u . "We control how the layout floats in the container by defining constraints. The purpose of constraints is to let the system being able to calculate the frame with position—x, y—and dimension—width and height.")) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.38%20PM.png") (alt "Constraints."))) c (c figcaption c (u . "Constraints."))) c (c figure c (q img ((src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.48%20PM.png") (alt "Alignment constraints."))) c (c figcaption c (u . "Alignment constraints.")))) (mod-time . 1432094202))))