((3) 0 () 320 ("  " "<li><img src=\"http://placehold.it/300x200\" alt=\"placeholder\" /></li>" "Block grid displayed in wide screen." "Block grid displayed in small screen." "language-markup" "    " "</div>" "Open example in jsFiddle." "Flexible video." " and " "Setting up Foundation" "Downloading foundation." "Customizing foundation components." "<!DOCTYPE html>" "<head>" "<meta charset=\"utf-8\">" "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" "<title>Foundation 5</title>" "<!-- You may add app.css to use for your overrides if you like -->" "<link rel=\"stylesheet\" href=\"css/normalize.css\">" "<link rel=\"stylesheet\" href=\"css/foundation.css\">" "</head>" "<body>" "<!-- body content here -->" "<script src=\"js/vendor/jquery.js\"></script>" "<script src=\"js/foundation.min.js\"></script>" "<script>" "$(document).foundation();" "</script>" "</body>" "</html>" "<html lang=\"en\">" "<div class=\"row\">" "      " "</ul>" "<header>" "</header>" "<footer>" "</footer>" "." "}" "block-grid-2" "Website showing in iPhone screen." "Website showing in iPhone article view." "Table view refreshing enabled in Storyboard." "language-objectivec" "UINavigationController" "Zurb sketch sheet" "NYtimes.com screenshot" "NYtimes.com in small-screen sketching." "Folding A4-size paper for mobile design" "Exercise time" "Screenshot of iOS Simulator." "Testing website in multiple devices. Photo taken by Jeremy Keith." "any" "Interface is cropped if we don’t setup the Auto Layout." " height." "All layout starts at any width and any height." " width " "Then we work on the compact width and any height." "Any width and compact height." " width and " "Regular for iPad." "Constraints." "Alignment constraints." "Step 1: " "Step 2: " "Step 3: " "Step 4: " "Step 5: " "Step 6: " "Step 7: " "language-swift" "})" "}))" "Heading structure" "Exercise" "ViewController.swift" "import UIKit" "import Photos" "@IBOutlet weak var mainTextView: UITextView!" "@IBOutlet weak var bottomMargin: NSLayoutConstraint!" "@IBOutlet weak var saveButton: UIButton!" "        " "            " "                " "if PHPhotoLibrary.authorizationStatus() == .Authorized {" "self.preloadLastPhoto()" "let userDefault = NSUserDefaults.standardUserDefaults()" "self.presentViewController(alertView, animated: true, completion: nil)" "alertView.addAction(UIAlertAction(title: \"I understand\", style: UIAlertActionStyle.Cancel, handler: nil))" "@IBAction func longPressSaveThought(sender: AnyObject) {" "// ask if want to include the last photo" "let alertView = UIAlertController(title: \"Save Thought\", message: \"Do you want to include the last image in Photo Library?\", preferredStyle: UIAlertControllerStyle.ActionSheet)" "alertView.addAction(UIAlertAction(title: \"Save with last photo\", style: UIAlertActionStyle.Default, handler: { (action) -> Void in" "                    " "alertView.addAction(UIAlertAction(title: \"Save the text\", style: UIAlertActionStyle.Default, handler: { (action) -> Void in" "self.shareItems([self.mainTextView.text])" "alertView.addAction(UIAlertAction(title: \"Cancel\", style: UIAlertActionStyle.Cancel, handler: nil))" "// for iPad" "alertView.popoverPresentationController?.sourceView = self.saveButton" "}else {" "self.view.layoutIfNeeded()" "self.mainTextView.text = \"\"" "// MARK: - Get Last Photo" "func getLastPhoto(completion:(image:UIImage)->Void) {" "let fetchOptions = PHFetchOptions()" "fetchOptions.sortDescriptors = [NSSortDescriptor(key: \"creationDate\", ascending: true)]" "let fetchResult = PHAsset.fetchAssetsWithOptions(fetchOptions)" "let lastPhoto = fetchResult.lastObject as! PHAsset" "NSLog(\"last Photo: %@\", lastPhoto)" "let requestOptions = PHImageRequestOptions()" "requestOptions.synchronous = true" "PHImageManager.defaultManager().requestImageDataForAsset(lastPhoto, options: requestOptions, resultHandler: { (imageData, dataUTI, orientation, info) -> Void in" "NSLog(\"photo: %@\", photo!)" "completion(image: photo!)" "UITextView" "ViewController" "let SAVED_TEXT_KEY = \"SAVED_TEXT_KEY\"" "// MARK: - TextView Content" "func initTextViewContent() {" "// try to load from NSUserDefault." "if (userDefault.objectForKey(SAVED_TEXT_KEY) != nil) {" "self.mainTextView.text = userDefault.stringForKey(SAVED_TEXT_KEY)" "func textViewDidChange(textView: UITextView) {" "// save to NSUserDefault until save." "userDefault.setObject(textView.text, forKey: SAVED_TEXT_KEY)" "override func viewDidLoad() {" "super.viewDidLoad()" "// Do any additional setup after loading the view, typically from a nib." "initTextViewContent()" "registerKeyboardEvents()" "mainTextView.becomeFirstResponder()" "What just happened?" "this link" "Main.storyboard" "showPrepareUI()" "Navigation panel with pragma marks defined." "Screenshot of the timer counting down" "tick" "func tick() {" "return" "showRunningUI()" "let remainSeconds:NSNumber = MZTimer.sharedTimer.remainSeconds()" "countDownLabel.text = remainSeconds.stringOfMinutesSeconds() as String" "A screenshot showing how mobile-friendly web makes use of large buttons and list view." "Setting view." "More complicated list view." "row-column-based layout." "<div class='row'>" "Small grid expands to wide screen." "Small grid for small screen." "Small, medium, large." ", " "medium-N" "large-N" "Mobile Web Design" "seconds" "@IBAction func startTimer(sender: AnyObject) {" "Ikea puts a ‘website’ on instagram." "Main content is marked as green color." "The article displayed in it’s original website." "The same article displayed by the browser’s article-only view." "The same article being displayed in a read-later service." "Article being extracted by Evernote." "Document title appears in the facebook sharing box." "og" "Same document title on every page" "Different document title for each page" "MZMutableTimer.sharedMutableTimer.scheduleAlertForSeconds(30.0)" "by-the-way" "#by-the-way" "By the way" "Controling notification actions in Apple Watch." "Apple Watch" "Our example starts in this layout." "<div class='small-9 columns'>Content</div>" "<div class='small-3 columns'>Sidebar</div>" "Sidebar on the left." "Pushing columns." "Prompting user for allowing notification." "UIApplication.sharedApplication().scheduleLocalNotification(notification)" "Properties for notification action." "action" "action1.identifier = \"EXTRA_30S\"" "action1.title = \"+30s\"" "action1.activationMode = UIUserNotificationActivationMode.Background" "action1.destructive = false" "action1.authenticationRequired = false" " " "var lastPhoto: UIImage?" "func askForPhotoPremission() {" "PHPhotoLibrary.requestAuthorization { (status) -> Void in" "if (status == .Authorized) {" "NSOperationQueue.mainQueue().addOperationWithBlock {" "func preloadLastPhoto() {" "self.getLastPhoto({ (image) -> Void in" "self.lastPhoto = image" "func handlePhotoChanges() {" "PHPhotoLibrary.sharedPhotoLibrary().registerChangeObserver(self)" " function." "func photoLibraryDidChange(changeInstance: PHChange) {" "In the " "viewDidLoad" "askForPhotoPremission()" "preloadLastPhoto()" "handlePhotoChanges()" "if (self.lastPhoto == nil) {" "self.promptForPhotoFailing()" "self.promptForApprovalAgain()" "} else {" "self.shareItems([self.mainTextView.text, self.lastPhoto!])" "func promptForApprovalAgain() {" "let alertView = UIAlertController(title: \"Photo Access\", message: \"The app needs your approval to access the last photo. Please enable it at Settings > Privacy > Photos\", preferredStyle: UIAlertControllerStyle.Alert)" "func promptForPhotoFailing() {" "let alertView = UIAlertController(title: \"Photo fails\", message: \"The app fails to fetch photo from the iCloud library. It may due to network issue. Please try again later.\", preferredStyle: UIAlertControllerStyle.Alert)" "Showing different image sources for different screen sizes." "seamless" "Create a new class file named " "MZTimer" " class." "let userDefault = sharedUserDefault()" "return 0" "MZMutableTimer" "LocalNotificationManager.sharedManager.scheduleNotificationWithInterval(seconds)" "LocalNotificationManager.sharedManager.removeAllNotifications()" "return true" "MZMutableTimer.sharedMutableTimer.cancelAlertsIfZero()" "@IBAction func cancelTimer(sender: AnyObject) {" "MZMutableTimer.sharedMutableTimer.cancelAlerts()" "let elapsedSeconds = MZTimer.sharedTimer.elapsedSeconds()" "Setting up the development environment" "Testing environment" "iOS App Development" "/ios-app/kitchen-timer/" "Kitchen Timer" "/ios-app/quick-thoughts/" "Quick Thoughts" "/ios-app/mail-me/" "Mail Me" "Mobile UI Design" "Demo of centered column." "small-centered" "language-css" "bottomMargin" "// MARK: - Keyboard events" "func registerKeyboardEvents() {" "NSNotificationCenter.defaultCenter().addObserver(self, selector: \"keyboardShows:\", name: UIKeyboardWillShowNotification, object: nil)" "NSNotificationCenter.defaultCenter().addObserver(self, selector: \"keyboardHides:\", name: UIKeyboardWillHideNotification, object: nil)" "func keyboardShows(notification:NSNotification) {" "let keyboardRect = notification.userInfo![UIKeyboardFrameEndUserInfoKey]?.CGRectValue()" "func keyboardHides(notification:NSNotification) {" " as IBAction " "At the beginning of the " "let LAST_TEXT_KEY  = \"LAST_TEXT_KEY\"" "afterShare" "func afterShare() {" "// before clearing the text, we store it." "userDefault.setObject(self.mainTextView.text, forKey: LAST_TEXT_KEY)" "// clear the text view" "// show the keyboard again" "self.mainTextView.becomeFirstResponder()" "// clear saved content also" "userDefault.removeObjectForKey(SAVED_TEXT_KEY)" "Then we implement the " "@IBAction func loadText(sender: AnyObject) {" "// check if text view has un-saved text" "if (self.mainTextView.text.isEmpty) {" "loadLastText()" "// prompt alert view" "let alertController = UIAlertController(title: \"Un-saved text\", message: \"You have un-saved text. Do you want to override your text?\", preferredStyle: UIAlertControllerStyle.Alert)" "alertController.addAction(UIAlertAction(title: \"Load and override\", style: UIAlertActionStyle.Destructive, handler: { (action) -> Void in" "self.loadLastText()" "alertController.addAction(UIAlertAction(title: \"Cancel\", style: UIAlertActionStyle.Cancel, handler: nil))" "self.presentViewController(alertController, animated: true, completion: nil)" "func loadLastText() {" "if (userDefault.objectForKey(LAST_TEXT_KEY) != nil) {" "self.mainTextView.text = userDefault.stringForKey(LAST_TEXT_KEY)" "New target" "Today Extension" "Give the extension a name" "countDownLabel" "add30s" "minus30s" "Interface for today extension" "Xcode is loading the developer profile through internet" "Setting App Group" "MZTimer.swift" "func sharedUserDefault() -> NSUserDefaults {" "@IBOutlet weak var countDownLabel: UILabel!" "var seconds:NSTimeInterval = 0" "The " "@IBAction func add30s(sender: AnyObject) {" "seconds += 30" "@IBAction func minus30s(sender: AnyObject) {" "seconds = max(seconds-30, 0) // minus 30, minimun 0." "// MARK: - Timer interface" "func startUITimer() {" "let timer = NSTimer.scheduledTimerWithTimeInterval(0.2, target: self, selector: \"tick\", userInfo: nil, repeats: true)" "// only tick the UI timer when the MZTimer is running for any local notification." "if (!MZTimer.sharedTimer.isRunning()) {" "countDownLabel.text = (seconds as NSNumber).stringOfMinutesSeconds() as String" "Setting URL scheme in the main app" "start" "MZMutableTimer.sharedMutableTimer.scheduleAlertForSeconds(seconds)" "// MARK: - Activity Controller" "func shareItems(items:[AnyObject]) {" "let activityViewController = UIActivityViewController(activityItems: items, applicationActivities: nil)" "// for email sharing" "activityViewController.setValue(\"Quick Thoughts\", forKey: \"Subject\")" "activityViewController.popoverPresentationController?.sourceView = self.saveButton;" "activityViewController.completionWithItemsHandler = { activity, success, items, error in" "// content did shared" "if (success) {" "self.afterShare()" "let parentVC = UIApplication.sharedApplication().keyWindow?.rootViewController" "parentVC?.presentViewController(activityViewController, animated: true, completion: nil)" "// MARK: - UI Actions" "@IBAction func saveThought(sender: AnyObject) {" "shareItems([mainTextView.text])") () (h ! (equal) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/block-grid.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Block grid") c (c p c "Foundation provides " c (q code "small-block-grid-N") c (? . 153) c (q code "medium-block-grid-N") c (? . 9) q (code "large-block-grid-N") ". It’s very convinent when we need to spread the content evenly inside a space.") c (c pre c (c code c (c (c class c (? . 4))) c "<ul class=\"small-block-grid-2 medium-block-grid-4\">" c (u . "\n") c (? . 0) c (? . 1) c (u . "\n") c (? . 0) c "..." c (u . "\n") c (? . 0) c (? . 1) c (u . "\n") c (? . 34))) c (c p c (c a c (q (href "http://jsfiddle.net/makzan/z5u8kcud/")) c (? . 7))) c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/block-grid-wide-9bedba3425b619a01749c4c2d8f87c90.png") c (c alt c (? . 2))))) c (c figcaption c (? . 2))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/block-grid-small-e815b1ba2c994ccdf6d8b966edf5bada.png") c (c alt c (? . 3))))) c (c figcaption c (? . 3))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/block-grid.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/flex-video.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Flex video") c (q p "Here is a demo showing the usage of " (code "flex-video") " class from Zurb Foundation. It keeps the proportion of the embed video player, resulting in a much better looking in various screen sizes.") c (q p "An extra " (code "widescreen") " class would make the hight calculation uses the widescreen ratio.") c (c pre c (c code c (c (c class c (? . 4))) c (? . 149) c (u . "\n") c (? . 0) c "<div class='small-9 columns'>" c (u . "\n") c (? . 5) c "<div class=\"flex-video widescreen\">" c (u . "\n") c (? . 33) c "<iframe src=\"//www.youtube.com/embed/KBA4IzyEUDU?rel=0\" frameborder=\"0\" allowfullscreen></iframe>" c (u . "\n") c (? . 5) c (? . 6) c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c (? . 0) c (? . 177) c (u . "\n") c (? . 6))) c (c p c (c a c (q (href "http://jsfiddle.net/makzan/58tL5bfy/")) c (? . 7))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/flex-video-2470f3849d82d0b6a5860c5d86d8e156.png") c (c alt c (? . 8))))) c (c figcaption c (? . 8)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/flex-video.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/mail-me/step1-choosing-between-share-and-action-extension.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Choosing between share and action extension") c (c p c "Sometimes the " c (q em "share") c (? . 9) c (c em c (? . 183)) q " extension confuse us. There are subtle difference between share and action extension.") q (p (em "Action Extension") " is for manipulating the input items and return the output. Link a function in programming language, or a service in Mac OS X.") (p (em "Share Extension") " is for sending out the input items.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/mail-me/step1-choosing-between-share-and-action-extension.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/setting-up-foundation.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (c h1 c (? . 10)) c (c p c (? . 10) q (br) "Foundation is a library with both css and javascript code.") c (q p "If we don’t use any components that required javascript, we can omit the javascript part and just include the css.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/download-foundation-44ce6a431672bababc2fc18d69348c9b.png") c (c alt c (? . 11))))) c (c figcaption c (? . 11)))) c (q p "In this chapter, we will use the full library.") c (q p "1. Go to the Foundation website." (br) "2. Choose “Download Foundation”" (br) "3. Then choose “Download Everything”") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/foundation-customize-5472ab7c7cb09d544c21b34b5375061d.png") c (c alt c (? . 12))))) c (c figcaption c (? . 12)))) c (q p "If you need to customise the layout or the framework variable, you can customise the variables in their download page before downloading. The website will compile the custom build for us.") c (q p "Later in the preprocessing chapter, we will learn the option to customise the framework locally in the development machine.") c (q p "Here you can find the list of the files we get and their purposes from Foundation package.") c (q p "This is the suggested HTML setup by Zurb.") c (c pre c (c code c (c (c class c (? . 4))) c (? . 13) c (u . "\n") c "<!--[if IE 9]><html class=\"lt-ie10\" lang=\"en\" > <![endif]-->" c (u . "\n") c "<html class=\"no-js\" lang=\"en\">" c (u . "\n\n") c (? . 14) c (u . "\n") c (? . 0) c (? . 15) c (u . "\n") c (? . 0) c (? . 16) c (u . "\n") c (? . 0) c (? . 17) c (u . "\n\n") c (? . 0) c (? . 18) c (u . "\n") c (? . 0) c (? . 19) c (u . "\n") c (? . 0) c (? . 20) c (u . "\n\n") c (? . 0) c "<script src=\"js/vendor/modernizr.js\"></script>" c (u . "\n\n") c (? . 21) c (u . "\n") c (? . 22) c (u . "\n\n") c (? . 0) c (? . 23) c (u . "\n\n") c (? . 0) c (? . 24) c (u . "\n") c (? . 0) c (? . 25) c (u . "\n") c (? . 0) c (? . 26) c (u . "\n") c (? . 5) c (? . 27) c (u . "\n") c (? . 0) c (? . 28) c (u . "\n") c (? . 29) c (u . "\n") c (? . 30))) c (q p "If we don’t need the modernizr, we can use the following:") c (c pre c (c code c (c (c class c (? . 4))) c (? . 13) c (u . "\n") c (? . 31) c (u . "\n\n") c (? . 14) c (u . "\n") c (? . 0) c (? . 15) c (u . "\n") c (? . 0) c (? . 16) c (u . "\n") c (? . 0) c (? . 17) c (u . "\n\n") c (? . 0) c (? . 18) c (u . "\n") c (? . 0) c (? . 19) c (u . "\n") c (? . 0) c (? . 20) c (u . "\n\n") c (? . 21) c (u . "\n") c (? . 22) c (u . "\n\n") c (? . 0) c (? . 23) c (u . "\n\n") c (? . 0) c (? . 24) c (u . "\n") c (? . 0) c (? . 25) c (u . "\n") c (? . 0) c (? . 26) c (u . "\n") c (? . 5) c (? . 27) c (u . "\n") c (? . 0) c (? . 28) c (u . "\n") c (? . 29) c (u . "\n") c (? . 30))) c (q p "If we just need the CSS part and not using any of the JavaScript depended component, we can further trim the code into the following:") c (c pre c (c code c (c (c class c (? . 4))) c (? . 13) c (u . "\n") c (? . 31) c (u . "\n\n") c (? . 14) c (u . "\n") c (? . 0) c (? . 15) c (u . "\n") c (? . 0) c (? . 16) c (u . "\n") c (? . 0) c (? . 17) c (u . "\n\n") c (? . 0) c (? . 18) c (u . "\n") c (? . 0) c (? . 19) c (u . "\n") c (? . 0) c (? . 20) c (u . "\n\n") c (? . 21) c (u . "\n") c (? . 22) c (u . "\n\n") c (? . 0) c (? . 23) c (u . "\n\n") c (? . 29) c (u . "\n") c (? . 30)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/setting-up-foundation.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/2015-05-18-ios-app.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Start writing the iOS apps development examples") (p "I’m working on the 1st iOS apps dev example here. It’s the Kitchen Timer app which makes use of the AutoLayout, LocalNotification and Today extension.") (p (history "2015-05-18: First draft."))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/2015-05-18-ios-app.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/summary.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "iOS App Development—Summary") c (c p c "We had learned a lot techniques on building iOS app. Spceifically, we built apps with different UI components. We learned the iOS delegation pattern. We learned the multi-views management with " c (c code c (? . 46)) c (? . 9) c (q code "UITabBarController") c (? . 39)) c (c p c "This is the end of the " c (c em c (? . 233)) q " section. In next section, we will explore building mobile web pages.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/summary.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/minimal-mobile-friendly-website.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Minimal mobile friendly website") c (q p "The following code example shows how we can create a minimal website style that fits in small screen reading.") c (q p "The HTML:") c (c pre c (c code c (c (c class c (? . 4))) c (? . 35) c (u . "\n") c (? . 0) c (? . 32) c (u . "\n") c (? . 5) c "Website Title here" c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c (? . 36) c (u . "\n\n") c "<nav>" c (u . "\n") c (? . 0) c (? . 32) c (u . "\n") c (? . 5) c "<ul>" c (u . "\n") c (? . 33) c "<li>Link 1</li>" c (u . "\n") c (? . 33) c "<li>Link 2</li>" c (u . "\n") c (? . 33) c "<li>Link 3</li>" c (u . "\n") c (? . 5) c (? . 34) c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c "</nav>" c (u . "\n\n") c (? . 32) c (u . "\n") c (? . 0) c "<article>" c (u . "\n") c (? . 5) c (? . 35) c (u . "\n") c (? . 33) c "<h1>Heading of the content</h1>" c (u . "\n") c (? . 5) c (? . 36) c (u . "\n\n") c (? . 5) c "<p>Content paragraphs go here.</p>" c (u . "\n\n") c (? . 5) c (? . 37) c (u . "\n") c (? . 33) c "Author: Makzan" c (u . "\n") c (? . 5) c (? . 38) c (u . "\n\n") c (? . 0) c "</article>" c (u . "\n") c (? . 6) c (u . "\n\n") c (? . 37) c (u . "\n") c (? . 0) c (? . 32) c (u . "\n") c (? . 5) c "Copyright goes here." c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c (? . 38))) c (q p "The CSS:") c (c aside c "Note: We used box-sizing in our CSS. You may reference to the " c (q a ((href "https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing")) "Mozilla documentation") c (? . 39)) c (c pre c (c code c (c (c class c (? . 243))) c "/* normalize */" c (u . "\n") c "body, nav, ul, li, p, h1, h2, h3 {" c (u . "\n") c (? . 5) c "padding: 0;" c (u . "\n") c (? . 5) c "margin: 0;" c (u . "\n") c (? . 40) c (u . "\n\n") c "/* core styles */" c (u . "\n") c "* {" c (u . "\n") c (? . 5) c "-webkit-box-sizing: border-box;" c (u . "\n") c (? . 5) c "box-sizing: border-box;" c (u . "\n") c (? . 40) c (u . "\n\n") c "body > header," c (u . "\n") c "body > footer {" c (u . "\n") c (? . 5) c "background: #ffce25;" c (u . "\n") c (? . 40) c (u . "\n\n") c ".row {" c (u . "\n") c (? . 5) c "width: 100%;" c (u . "\n") c (? . 5) c "max-width: 600px;" c (u . "\n") c (? . 5) c "margin: 0 auto;" c (u . "\n") c (? . 5) c "padding: 10px;" c (u . "\n") c (? . 40) c (u . "\n\n") c "/* addition styles */" c (u . "\n") c "ul {" c (u . "\n") c (? . 5) c "list-style: none;" c (u . "\n") c (? . 40) c (u . "\n\n") c "h1, p {" c (u . "\n") c (? . 5) c "margin-bottom: .5em;" c (u . "\n") c (? . 40))) c (q p "Please find the following screenshot showing the minimal web site display in both normal view and article view in mobile Safari.") c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/sample-article-normal-6ffea1d2724da3e76cd697f46f19ee9a.png") c (c alt c (? . 42))))) c (c figcaption c (? . 42))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/sample-article-article-view-bd5614c63bfafc057d27703bf252243d.png") c (c alt c (? . 43))))) c (c figcaption c (? . 43))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/minimal-mobile-friendly-website.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/pull-to-refresh.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Pull to refresh with UIRefreshControl") c (q p "Step 1: Enable the " (em "Refreshing") " option in any " (code "UIScrollView") " in Storyboard.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/ios-dev-scrapbook/table-view-refreshing-enabled-8c1dbb2ed1734edcd6a38345409a997e.png") c (c alt c (? . 44))))) c (c figcaption c (? . 44))) c (q p "Step 2: Setup the refresh logic that tracks the " (code "UIControlEventValueChanged") " event:") c (c pre c (c code c (c (c class c (? . 45))) c "[self.refreshControl addTarget:self" c (u . "\n") c "                        " c "action:@selector(refreshNews:)" c (u . "\n") q "              " "forControlEvents:UIControlEventValueChanged];")) c (q p "Step 3: Implement the selector with logic that’s executed when user pulls and refreshes the view.") c (c pre c (c code c (c (c class c (? . 45))) c "- (void) refreshNews: (id)selector {" c (u . "\n") c (? . 0) c "// logic here to refresh the table view." c (u . "\n") c (? . 40)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/pull-to-refresh.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step1-building-interface.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 1—Building Interface") c (c p c "It’s a simple interface that we have an " c (c code c (? . 116)) c (? . 9) c (q code "UIButton") c (? . 39)) c (c p c "For the navigation bar, we use the " c (c code c (? . 46)) q " and set this view controller as its " (code "rootViewController")) c (q p "After this step, you should have the following " (code "IBOutlet") " created.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 80) c (u . "\n") c (? . 81) c (u . "\n") c (? . 82))) c (c p c (c code c (? . 244)) q " is the distance constraint of save button’s buttom to view controller’s bottom edge.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step1-building-interface.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/sketching-mobile-web-design.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Sketching mobile web design") c (q p "For sketching the layout of the mobile web, we can use a draft paper with narrow boundary box. Zurb’s sketchsheet is one of my favorites. Zurb Sketch sheet is a collection of website sketching toolkit. It contains different kinds of sketch sheets that we can use.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/zurb-sketchsheet-9bf1ede200470144d65533adf69cc62b.png") c (c alt c (? . 47))))) c (c figcaption c (? . 47))) c (q p "For example, this one contains both wide and narrow boundary that we can draw our website layout in both wide and small screen.") c (c h2 c (c (c id c (u . "exercise-time"))) c (c a c (c (c href c (u . "#exercise-time"))) c (? . 51))) c (q p "Now, browse to the the " (a ((href "http://portal.gov.mo/web/guest/citizen")) "Macao Government Portal") ". Follow the website layout and draw a rough layout sketch in the wide screen on the left of the sketch sheet.") c (q p "What I want you to do is then think how you would layout the content in the narrow screen. Try to draw your design on the right side.") c (q p "Here is a sketching example on NYtimes.com.") c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/nytimes-81dc1a21b67d0a0f031b26f50767855d.png") c (c alt c (? . 48))))) c (c figcaption c (? . 48))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/nytimes-wide-d1b253e64fa1b91e6aab88c0d2822e3e.png") c (c alt c (? . 49))))) c (c figcaption c (? . 49)))) c (q p "Now it’s your turn to work on the sketching of Macao Government Portal.") c (q p "You may take a photo of your design and send me your design via email.") c (q p "Remember the mobile first approach? To maximize the usage of this sketch sheet, you’ll actually need to draw the right side first. Then you draw on the left side only after you’ve done your mobile first design.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/fold-c974c48bb56394a98b192665594041f8.png") c (c alt c (? . 50))))) c (c figcaption c (? . 50)))) c (q p "What’s more? You can fold the the sketchsheet into 1/3 of the original one. Then hold it on your hand and feel your sketch. Are your buttons easy to tap? Are content too indense to read clearly?") c (c h2 c (c (c id c (u . "exercise-time"))) c (c a c (c (c href c (u . "#exercise-time"))) c (? . 51))) q (p "It’s time for some exercises. Now use your mobile device and explore some websites. Try to check if these websites provide a nice reading experience. Or can the system or service extract the content of the website.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/sketching-mobile-web-design.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/testing-environment.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (c h1 c (? . 232)) c (q p "How we test our website?") c (c h2 c (q (id "simulator")) c (c a c (c (c href c (u . "#simulator"))) q "Testing in simulator")) c (q p "We will also need to install emulator for both iOS and android system.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/introducing-web-design/test-in-ios-simulator-5911e7a217893f6a6e245d0ce3281477.png") c (c alt c (? . 52))))) c (c figcaption c (? . 52)))) c (c p c "The iOS simulator can be installed via the XCode, the apple development toolkit. The android emulator, on the other hand, can be installed via the android SDK. Alternatively, 3rd party emulator may be used, such as " c (q a ((href "https://www.genymotion.com/")) "genymotion") c (? . 39)) c (c h2 c (q (id "real-devices")) c (c a c (c (c href c (u . "#real-devices"))) q "Testing in real devices")) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/introducing-web-design/devices-photo-by-jeremy-keith-5682012a4b28526a50ecb12b044c1855.png") c (c alt c (? . 53))))) c (c figcaption c (? . 53)))) q (p "Beside simulating our web in the mobile simulator, we need to have real devices to further test it.") (p "Not only because simulator cannot simulate all the things, but also because holding the web on hand is important. We need the feeling of scrolling the screen, tapping on links and buttons, and inputting the form value with the virtual keyboard.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/testing-environment.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/trying-foundation-on-web-editor.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Trying Foundation on web editor") c (q p "If you want to experiement Zurb Foundation in jsFiddle, you’ll need to include the CSS and JavaScript. The fiddle should also be selected to use jQuery where Foundation depends on it.") c (q p "CDN:") c (q pre "http://cdnjs.com/libraries/foundation") c (q p "Specifically, we need the following 2 files to get started.") c (c pre c "https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css" c (u . "\n") q "https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/js/foundation.min.js") q (p "Or you may start in the following fiddle where I have included the Foundation resources.") (p (a ((href "http://jsfiddle.net/makzan/QVCHT/")) "Template of Foundation on jsFiddle"))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/trying-foundation-on-web-editor.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/index.ptree" . unix) h ! (equal) (mod-time . 1434343828) (doc q pagetree-root index.html (ios-app/index.html (ios-app/kitchen-timer/index.html ios-app/kitchen-timer/step1.html ios-app/kitchen-timer/step2-auto-layout.html ios-app/kitchen-timer/step3-local-notification.html ios-app/kitchen-timer/step4-select-seconds.html ios-app/kitchen-timer/step5-implement-mztimer.html ios-app/kitchen-timer/step6-using-mztimer.html ios-app/kitchen-timer/step7-timer-format.html ios-app/kitchen-timer/step8-creating-today-extension.html ios-app/kitchen-timer/step9-handling-notification-event.html ios-app/kitchen-timer/another-autolayout-example.html) (ios-app/quick-thoughts/index.html ios-app/quick-thoughts/step1-building-interface.html ios-app/quick-thoughts/step2-handle-keyboard-size.html ios-app/quick-thoughts/step3-saving-text-locally.html ios-app/quick-thoughts/step4-basic-sharing-function.html ios-app/quick-thoughts/step5-load-last-shared-text.html ios-app/quick-thoughts/step6-getting-last-photo.html ios-app/quick-thoughts/step7-polishing-photo-fetching-logic.html ios-app/quick-thoughts/final-source-code.html) (ios-app/mail-me/index.html ios-app/mail-me/step1-choosing-between-share-and-action-extension.html) (ios-app/secrets/index.html ios-app/secrets/step1-prototyping-in-storyboard.html) ios-app/pragma-mark.html ios-app/pull-to-refresh.html ios-app/apple-watch.html ios-app/summary.html) (mobile-web/index.html (mobile-web/chapter-1/index.html mobile-web/chapter-1/setting-up-the-development-environment.html mobile-web/chapter-1/testing-environment.html) (mobile-web/chapter-2/index.html mobile-web/chapter-2/document-title.html mobile-web/chapter-2/content-strategy.html mobile-web/chapter-2/content-structure.html mobile-web/chapter-2/mobile-first-approach.html mobile-web/chapter-2/sketching-mobile-web-design.html mobile-web/chapter-2/minimal-mobile-friendly-website.html mobile-web/chapter-2/list-view.html mobile-web/chapter-2/do-mobile-web-has-to-be-website.html) (mobile-web/chapter-3/index.html mobile-web/chapter-3/trying-foundation-on-web-editor.html mobile-web/chapter-3/setting-up-foundation.html mobile-web/chapter-3/foundation-grid.html mobile-web/chapter-3/centered-column.html mobile-web/chapter-3/push-and-pull-column.html mobile-web/chapter-3/block-grid.html mobile-web/chapter-3/flex-video.html mobile-web/chapter-3/interchangable-content.html)) summary.html (logs/index.html logs/2015-05-18-ios-app.html logs/2015-05-01-mobile-web-design.html)) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/index.ptree"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step2-auto-layout.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 2—Adding Auto Layout") c (c p c "After preparing the basic user interface, we prepare the AutoLayout to make the interface response to different screen sizes. There are different size classes that we can define individual layout rules to each of them. By default, we start at " c (c em c (? . 54)) c (? . 61) c (c em c (? . 54)) c (? . 56)) c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-17%20at%209.04.50%20PM.png") c (c alt c (? . 55))))) c (c figcaption c (? . 55)))) c (c h2 c (c (c id c (u . "size-classes"))) c (c a c (c (c href c (u . "#size-classes"))) q "Size Classes")) c (q p "My Piority on setting Auto Layout for different sizes.") c (c p c "1. We begin with " c (c em c (? . 54)) c (? . 58) c (c em c (? . 54)) c (? . 56)) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.01%20PM.png") c (c alt c (? . 57))))) c (c figcaption c (? . 57))) c (c p c "2. " c (q em "Compact") c (? . 58) c (c em c (? . 54)) c (? . 56)) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.08%20PM.png") c (c alt c (? . 59))))) c (c figcaption c (? . 59))) c (c p c "3. " c (q em "Any") c (? . 58) c (q em "compact") c (? . 56)) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.11%20PM.png") c (c alt c (? . 60))))) c (c figcaption c (? . 60))) c (c p c "4. " c (q em "Regular") c (? . 61) c (q em "regular") c (? . 56)) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.24%20PM.png") c (c alt c (? . 62))))) c (c figcaption c (? . 62))) c (c h2 c (c (c id c (u . "constraints"))) c (c a c (c (c href c (u . "#constraints"))) q "Constraints")) c (q p "We control how the layout floats in the container by defining constraints. The purpose of constraints is to let the system being able to calculate the frame with position—x, y—and dimension—width and height.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.38%20PM.png") c (c alt c (? . 63))))) c (c figcaption c (? . 63))) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%202.28.48%20PM.png") c (c alt c (? . 64))))) c (c figcaption c (? . 64)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step2-auto-layout.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/index.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Chapter 3 – Using Zurb foundation") c (q p "In this chapter, we focus on using a CSS framework to build a full-functional mobile web site.") c (c h2 c (c (c id c (u . "exercise"))) c (c a c (c (c href c (u . "#exercise"))) c (? . 76))) q (p "Try to make use of the Zurb Foundation framework and apply it to a web project. If you don’t have any active web projet, try to work on the government website.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/mail-me/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc q root (h1 "Example Project—Mail Me") (p "We’re going to build an app that takes a text input via extension.") (p "We’ll learn the following:") (p "- Take text in share extension" (br) "- POST to API with AlamoFire" (br) "- Sending mail using MailGun service") (p "It uses the AlamoFire library to access the MailGun API to send email.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/mail-me/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Example Project—Quick Thoughts") c (q p "In this example, we’re going to build a notes taking app.") c (q p "- More on Auto Layout" (br) "- Sharing with Activity View Controller" (br) "- Managing keyboard shows and hides") c (c p c (? . 65) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step1-building-interface.html"))) q "Building interface.") c (q br) c (? . 66) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step2-handle-keyboard-size.html"))) q "Handling keyboard size.") c (q br) c (? . 67) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step3-saving-text-locally.html"))) q "Saving text locally.") c (q br) c (? . 68) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step4-basic-sharing-function.html"))) q "Basic sharing function.") c (q br) c (? . 69) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step5-load-last-shared-text.html"))) q "Loading last shared text.") c (q br) c (? . 70) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step6-getting-last-photo.html"))) q "Getting last photo.") c (q br) c (? . 71) c (c a c (c (c href c (u . "/ios-app/quick-thoughts/step7-polishing-photo-fetching-logic.html"))) q "Polishing photo fetching logic.")) c (c p c (c a c (c (c href c (u . "/ios-app/quick-thoughts/final-source-code.html"))) q "Download final code example."))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Example Project—Kitchen Timer") c (q p "In this example, we’re going to build a timer. This timer is particular useful in kitchen. Imagine now we are cooking a fish and want to get an alert after 2 minutes 30 seconds. We can launch the app and set up the timer in few taps. Then we will get alert without worrying getting the fish over-cooked.") c (q p "- Auto Layout" (br) "- Local Notification" (br) "- Extension") c (c p c (? . 65) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step1.html"))) q "Preparing the project.") c (q br) c (? . 66) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step2-auto-layout.html"))) q "Setup the Auto Layout.") c (q br) c (? . 67) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step3-local-notification.html"))) q "Scheduling Local Notification.") c (q br) c (? . 68) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step4-select-seconds.html"))) q "Select seconds to schedule.") c (q br) c (? . 69) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step5-implement-mztimer.html"))) q "Implementing MZTimer.") c (q br) c (? . 70) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step6-using-mztimer.html"))) q "Using MZTimer.") c (q br) c (? . 71) c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step7-timer-format.html"))) q "Timer Format.") c (q br) c "Step 8: " c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step8-creating-today-extension.html"))) q "Creating today extension.") c (q br) c "Step 9: " c (c a c (c (c href c (u . "/ios-app/kitchen-timer/step9-handling-notification-event.html"))) q "Handling notification event.")) c (c p c "You may download the source code in the " c (c a c (q (href "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/KitchenTimer-Swift.zip")) c (? . 134)) c (? . 39))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step6-getting-last-photo.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 6—Getting last photo") c (q p "In this step, we allow the user to share the last photo along with the text.") c (c ol c (q li "In the interface builder, add a " (em "Long Press") " gesture recognizer to the save button.") c (c li c (c p c "To use the PhotoKit, we need to import the framework at the beginning of the file. After the existing " c (c code c (? . 78)) q " line, add the following line:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 79)))) c (c li c (q p "We implement the following function to get the last photo.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 104) c (u . "\n") c (? . 105) c (u . "\n") c (? . 0) c (? . 106) c (u . "\n") c (? . 0) c (? . 107) c (u . "\n\n") c (? . 0) c (? . 108) c (u . "\n") c (? . 0) c (? . 109) c (u . "\n\n") c (? . 0) c (? . 110) c (u . "\n\n") c (? . 0) c (? . 111) c (u . "\n") c (? . 0) c (? . 112) c (u . "\n\n") c (? . 0) c (? . 113) c (u . "\n\n") c (? . 5) c "NSLog(\"image data: %@\", imageData)" c (u . "\n\n") c (? . 5) c "let photo = UIImage(data: imageData)" c (u . "\n\n") c (? . 5) c (? . 114) c (u . "\n") c (? . 5) c (? . 115) c (u . "\n") c (? . 0) c (? . 73) c (u . "\n") c (? . 40)))) c (c li c "Link the Long Press action to the " c (c code c (? . 77)) c (? . 252) c (q code "longPressSaveThought:") c (? . 39)) c (c li c (q p "Then we implement the long press gesture handler.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 189) c (? . 91) c (u . "\n") c (? . 0) c (? . 92) c (u . "\n") c (? . 0) c (? . 93) c (u . "\n\n") c (? . 0) c (? . 94) c (u . "\n") c (? . 33) c "self.getLastPhoto({ (lastPhoto) -> Void in" c (u . "\n") c (? . 83) c "self.shareItems([self.mainTextView.text, lastPhoto])" c (u . "\n") c (? . 33) c (? . 73) c (u . "\n\n") c (? . 0) c (? . 74) c (u . "\n\n") c (? . 0) c (? . 96) c (u . "\n") c (? . 33) c (? . 97) c (u . "\n") c (? . 0) c (? . 74) c (u . "\n\n\n") c (? . 0) c (? . 98) c (u . "\n\n") c (? . 0) c (? . 99) c (u . "\n") c (? . 0) c (? . 100) c (u . "\n\n") c (? . 0) c (? . 89) c (u . "\n\n") c (? . 40))))) c (c h2 c (c (c id c (u . "what-just-happened?"))) c (c a c (c (c href c (u . "#what-just-happened?"))) c (? . 133))) c (q p "We enhanced the project with ability to share last photo alongside the text.") c (c p c "You may check the " c (q a ((href "https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html")) "Swift guide on using the Closures") c (? . 39))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step6-getting-last-photo.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/index.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Logs") (p "Here you’ll find the update logs for this website.") (p (a ((href "/logs/2015-05-18-ios-app.html")) "2015-05-18: Start writing iOS app examples.") (br) (a ((href "/logs/2015-05-01-mobile-web-design.html")) "2015-05-01: Start writing Mobile web design examples."))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/content-strategy.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Content strategy") c (q p "Why we should care about content first?") c (q p "Because no matter how the web and app present our content, the content itself doesn’t change. So the first thing we should focus is the content structure.") c (q p "By structure, I meant the important order of our content. I meant the correct headings for our content. The informative HTML tags we applied to our content.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/headings-69a933860bed2a5ced3f19a29a7e45a5.png") c (c alt c (? . 75))))) c (c figcaption c (? . 75)))) c (q p "The next most important thing after document title is our headings.") c (q p "Headings define the document outline. It shows the architecture of the essay.") c (q p "Correct use of headings helps both readers and software process the content.") c (c p c "Our main heading (h1) may be used in many places. It could be the title of our essay that’s displayed in " c (q em "email newsletter") c (? . 9) c (q em "read later service") c (? . 39)) c (c p c "For detail about how we should use the headings, we may check the " c (q a ((href "http://www.w3.org/html/wg/drafts/html/master/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements")) "reference to the W3C spec about the headings") c (? . 39)) c (c p c (c iframe c (c (c seamless c (? . 217)) q (src "http://jsfiddle.net/makzan/4nu9stc5/embedded/result/")))) c (c h2 c (c (c id c (u . "exercise"))) c (c a c (c (c href c (u . "#exercise"))) c (? . 76))) q (p "Now try to make use of the HTML5 tags to write a news web page. You may create or copy dummy content. We focus only on the structure.") (p "Try to write the core content first. Then add the author information. Then the category of this essay. Then add a website header and footer. Then add a navigation list. Then add a side bar to display related content. After adding all these things, can the reading tool still extract your essay content?")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/content-strategy.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/final-source-code.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Final source code of the project") c (c p c "You may " c (q a ((href "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/QuickThoughts.zip")) "download the final source code") c ". And here is the full " c (c code c (? . 77)) q " file:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 78) c (u . "\n") c (? . 79) c (u . "\n\n") c (? . 118) c (u . "\n") c (? . 254) c (u . "\n\n") c "class ViewController: UIViewController, UITextViewDelegate, PHPhotoLibraryChangeObserver {" c (u . "\n\n") c (? . 5) c (? . 80) c (u . "\n") c (? . 5) c (? . 81) c (u . "\n") c (? . 5) c (? . 82) c (u . "\n\n") c (? . 5) c (? . 190) c (u . "\n\n") c (? . 5) c (? . 127) c (u . "\n") c (? . 83) c (? . 128) c (u . "\n") c (? . 83) c (? . 129) c (u . "\n\n") c (? . 83) c (? . 130) c (u . "\n\n") c (? . 83) c (? . 131) c (u . "\n\n") c (? . 83) c (? . 132) c (u . "\n\n") c (? . 83) c (? . 204) c (u . "\n\n") c (? . 83) c (? . 205) c (u . "\n\n") c (? . 83) c (? . 206) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c "override func didReceiveMemoryWarning() {" c (u . "\n") c (? . 83) c "super.didReceiveMemoryWarning()" c (u . "\n") c (? . 83) c "// Dispose of any resources that can be recreated." c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 198) c (u . "\n") c (? . 83) c (? . 86) c (u . "\n") c (? . 84) c (? . 199) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 191) c (u . "\n") c (? . 83) c (? . 192) c (u . "\n") c (? . 84) c (? . 193) c (u . "\n") c (? . 85) c (? . 194) c (u . "\n") c (? . 95) c (? . 87) c (u . "\n") c (? . 85) c (? . 40) c (u . "\n") c (? . 84) c (? . 40) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 195) c (u . "\n") c (? . 83) c (? . 86) c (u . "\n") c (? . 84) c (? . 196) c (u . "\n") c (? . 85) c (? . 197) c (u . "\n") c (? . 84) c (? . 73) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 201) c (u . "\n") c (? . 83) c (? . 87) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n\n") c (? . 5) c (? . 119) c (u . "\n\n") c (? . 5) c (? . 120) c (u . "\n") c (? . 83) c (? . 103) c (u . "\n\n") c (? . 83) c (? . 121) c (u . "\n") c (? . 83) c (? . 88) c (u . "\n") c (? . 83) c (? . 122) c (u . "\n") c (? . 84) c (? . 123) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 124) c (u . "\n") c (? . 83) c (? . 125) c (u . "\n") c (? . 83) c (? . 88) c (u . "\n") c (? . 83) c (? . 126) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 317) c (u . "\n\n") c (? . 5) c (? . 212) c (u . "\n") c (? . 83) c (? . 213) c (u . "\n") c (? . 83) c (? . 90) c (u . "\n") c (? . 83) c (? . 89) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 214) c (u . "\n") c (? . 83) c (? . 215) c (u . "\n") c (? . 83) c (? . 90) c (u . "\n") c (? . 83) c (? . 89) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 91) c (u . "\n") c (? . 83) c (? . 92) c (u . "\n") c (? . 83) c (? . 93) c (u . "\n\n") c (? . 83) c (? . 94) c (u . "\n") c (? . 84) c (? . 207) c (u . "\n") c (? . 85) c (? . 86) c (u . "\n") c (? . 95) c (? . 208) c (u . "\n") c (? . 85) c (? . 101) c (u . "\n") c (? . 95) c (? . 209) c (u . "\n") c (? . 85) c (? . 40) c (u . "\n\n") c (? . 84) c (? . 210) c (u . "\n") c (? . 85) c (? . 211) c (u . "\n") c (? . 84) c (? . 40) c (u . "\n\n") c (? . 83) c (? . 74) c (u . "\n\n") c (? . 83) c (? . 96) c (u . "\n") c (? . 84) c (? . 97) c (u . "\n") c (? . 83) c (? . 74) c (u . "\n\n\n") c (? . 83) c (? . 98) c (u . "\n\n") c (? . 83) c (? . 99) c (u . "\n") c (? . 83) c (? . 100) c (u . "\n\n") c (? . 83) c (? . 89) c (u . "\n\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 5) c (? . 318) c (u . "\n") c (? . 83) c (? . 319) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n\n") c (? . 5) c (? . 265) c (u . "\n") c (? . 83) c (? . 266) c (u . "\n") c (? . 83) c (? . 267) c (u . "\n") c (? . 84) c (? . 268) c (u . "\n") c (? . 83) c (? . 101) c (u . "\n") c (? . 84) c (? . 269) c (u . "\n") c (? . 84) c (? . 270) c (u . "\n") c (? . 84) c (? . 271) c (u . "\n") c (? . 85) c (? . 272) c (u . "\n") c (? . 84) c (? . 74) c (u . "\n") c (? . 84) c (? . 273) c (u . "\n") c (? . 84) c (? . 274) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 5) c (? . 275) c (u . "\n") c (? . 83) c (? . 88) c (u . "\n") c (? . 83) c (? . 276) c (u . "\n") c (? . 84) c (? . 277) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 245) c (u . "\n\n") c (? . 5) c (? . 246) c (u . "\n") c (? . 83) c (? . 247) c (u . "\n") c (? . 83) c (? . 248) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 249) c (u . "\n") c (? . 83) c (? . 250) c (u . "\n\n") c (? . 83) c "NSLog(\"%@\", NSStringFromCGSize(keyboardRect!.size))" c (u . "\n\n") c (? . 83) c "self.bottomMargin.constant = keyboardRect!.size.height + 10" c (u . "\n") c (? . 83) c (? . 102) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 251) c (u . "\n") c (? . 83) c "self.bottomMargin.constant = 20" c (u . "\n") c (? . 83) c (? . 102) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 305) c (u . "\n") c (? . 5) c (? . 306) c (u . "\n") c (? . 83) c (? . 307) c (u . "\n\n") c (? . 83) c (? . 308) c (u . "\n") c (? . 83) c (? . 309) c (u . "\n\n") c (? . 83) c (? . 99) c (u . "\n") c (? . 83) c (? . 310) c (u . "\n\n") c (? . 83) c (? . 311) c (u . "\n\n") c (? . 84) c (? . 312) c (u . "\n") c (? . 84) c (? . 313) c (u . "\n") c (? . 85) c (? . 314) c (u . "\n") c (? . 84) c (? . 40) c (u . "\n") c (? . 83) c (? . 40) c (u . "\n\n") c (? . 83) c (? . 315) c (u . "\n") c (? . 83) c (? . 316) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 256) c (u . "\n") c (? . 83) c (? . 257) c (u . "\n") c (? . 83) c (? . 88) c (u . "\n") c (? . 83) c (? . 258) c (u . "\n\n") c (? . 83) c (? . 259) c (u . "\n") c (? . 83) c (? . 103) c (u . "\n\n") c (? . 83) c (? . 260) c (u . "\n") c (? . 83) c (? . 261) c (u . "\n\n") c (? . 83) c (? . 262) c (u . "\n") c (? . 83) c (? . 263) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c (? . 104) c (u . "\n") c (? . 5) c (? . 105) c (u . "\n") c (? . 83) c (? . 106) c (u . "\n") c (? . 83) c (? . 107) c (u . "\n\n") c (? . 83) c (? . 108) c (u . "\n\n") c (? . 83) c "NSLog(\"Fetch result: %d\", fetchResult.count)" c (u . "\n\n") c (? . 83) c (? . 109) c (u . "\n\n") c (? . 83) c (? . 110) c (u . "\n\n") c (? . 83) c (? . 111) c (u . "\n") c (? . 83) c (? . 112) c (u . "\n") c (? . 83) c "requestOptions.networkAccessAllowed = true" c (u . "\n\n") c (? . 83) c (? . 113) c (u . "\n\n") c (? . 84) c "if (imageData == nil) {" c (u . "\n") c (? . 85) c "NSLog(\"Error fetching photo! %@\", info)" c (u . "\n") c (? . 85) c (? . 141) c (u . "\n") c (? . 84) c (? . 40) c (u . "\n\n") c (? . 84) c "let photo = UIImage(data: imageData!)" c (u . "\n\n") c (? . 84) c (? . 114) c (u . "\n") c (? . 84) c (? . 115) c (u . "\n") c (? . 83) c (? . 73) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n\n") c (? . 40) c (u . "\n\n")))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/final-source-code.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step3-saving-text-locally.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 3—Saving text locally") c (q p "We want to save the text locally before saving the text into other services. We monitor the content change of the text view and save the text locally.") c (c ol c (c li c "Make sure we have set the delegate of the " c (c code c (? . 116)) c " to the " c (c code c (? . 117)) c (? . 39)) c (c li c (c p c "Since we have set the delegate, we need to include the " c (q code "UITextViewDelegate") c " in the class header line. The " c (c code c (? . 117)) q " class declaration becomes the following:" (br)) c (c pre c (c code c (c (c class c (? . 72))) c (? . 0) c "class ViewController: UIViewController, UITextViewDelegate {" c (u . "\n") c (? . 40))) c (c p c (c li c (c p c (? . 253) c (c code c (? . 77)) q " file, we add the following constant.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 118)))) c (q br) c (c li c (q p "Somewhere in the code, we addd the following block of logic:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 119) c (u . "\n\n") c (? . 120) c (u . "\n") c (? . 0) c (? . 103) c (u . "\n\n") c (? . 0) c (? . 121) c (u . "\n") c (? . 0) c (? . 88) c (u . "\n") c (? . 0) c (? . 122) c (u . "\n") c (? . 33) c (? . 123) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 124) c (u . "\n") c (? . 0) c (? . 125) c (u . "\n") c (? . 0) c (? . 88) c (u . "\n") c (? . 0) c (? . 126) c (u . "\n") c (? . 40)))) c (q br) c (c li c "Then we update the " c (c code c (? . 203)) c " method to call the " c (q code "initTextViewContent") c (? . 200)) q (br)) c (c pre c (c code c (c (c class c (? . 72))) c (? . 127) c (u . "\n") c (? . 0) c (? . 128) c (u . "\n") c (? . 0) c (? . 129) c (u . "\n\n") c (? . 0) c (? . 130) c (u . "\n\n") c (? . 0) c (? . 131) c (u . "\n\n") c (? . 0) c (? . 132) c (u . "\n") c (? . 40))))) c (c h2 c (c (c id c (u . "what-just-happened?"))) c (c a c (c (c href c (u . "#what-just-happened?"))) c (? . 133))) c (q p "We just stored our text locally and restore the text every time the app launches. At this moment, the app serves as a quick note taking utility that what you have written is always there for you to porcess.") c (c h2 c (c (c id c (u . "declaring-delegate-in-class-header"))) c (c a c (c (c href c (u . "#declaring-delegate-in-class-header"))) q "Declaring Delegate in Class Header")) q (p "Back in the Objective-C time, compiler warns us when we miss any delegation declaration. We had to declare what delegate the class handles to get rid of the warning. In the swift compiler, the warning is gone. But I still keep this good habit. 2 reasons:") (p "1. I can easily " (em "command+click") " on the class header to view the list of delegate methodns that I can use." (br) "2. If there is any required functions in the delegate, the complier throws errors and fail to build. This prevent run-time crash when the original logic call the required delegate functions and not found.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step3-saving-text-locally.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step1.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 1") c (q p "In this step, we create the basic user interface.") c (c ol c (c p c (c li c "Download the images from the " c (c a c (q (href "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Interfaces%20for%20Kitchen%20Timer.zip")) c (? . 134)) c (? . 39)) c (q br) c (c li c "Crate new XCode project, with " c (q em "swift") c (? . 9) q (em "universal") " option")) c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-17%20at%209.10.50%20PM.png") c (c alt c (? . 135))))) c (c figcaption c (? . 135)))) c (q p (li "Setup the interface like the following.")) c (c p c (c li c (q p "Create outlet.") c (c pre c (c code c (c (c class c (? . 72))) c "@IBOutlet weak var startButton: UIButton!" c (u . "\n") q "@IBOutlet weak var stopButton: UIButton!"))) c (q br) c (c li c (q p "Define 2 functions that controls the interface visibility.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK - UI Visibility" c (u . "\n\n") c "func showRunningUI() {" c (u . "\n") c (? . 5) c "stopButton.hidden = false" c (u . "\n") c (? . 5) c "startButton.hidden = true" c (u . "\n") c (? . 40) c (u . "\n\n") c "func showPrepareUI() {" c (u . "\n") c (? . 5) c "stopButton.hidden = true" c (u . "\n") c (? . 5) c "startButton.hidden = false" c (u . "\n") c (? . 40))))) c (c p c (c li c (q p "Then we define the following button handler.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 158) c (u . "\n") c (? . 5) c (? . 142) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 228) c (u . "\n") c (? . 5) c (? . 136) c (u . "\n") c (? . 40)))) c (q br) c (c li c (q p "At last, we setup the interface at the viewDidLoad") c (c pre c (c code c (c (c class c (? . 72))) c (? . 127) c (u . "\n") c (? . 5) c (? . 128) c (u . "\n") c (? . 5) c (? . 129) c (u . "\n") c (? . 5) c (? . 136) c (u . "\n") c (? . 40))))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step1.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/pragma-mark.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Pragma mark in swift") c (q p "Pragma mark allows easily seperate methods into groups, in both source code and navigation panel.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%205.58.17%20PM.png") c (c alt c (? . 137))))) c (c figcaption c (? . 137))) c (q p "The Pragma Mark in Objective-C:") c (c pre c (c code c (c (c class c (? . 45))) q "#pragma mark")) c (q p "The Pragma Mark in Swift:") c (c pre c (c code c (c (c class c (? . 72))) q "// MARK:")) c (q p "For example, the horizontal line can be presented by:") c (c pre c (c code c (c (c class c (? . 72))) q "// MARK: -")) c (q p "Title following an horizontal line would be:") c (c pre c (c code c (c (c class c (? . 72))) q "// MARK: - Text Goes Here"))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/pragma-mark.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step7-timer-format.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 7—Timer Format") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%201.08.05%20PM.png") c (c alt c (? . 138))))) c (c figcaption c (? . 138)))) c (c ol c (c li c (c p c "Create a new file named " c (q code "NSNumber+MZTimerFormat.swift") c (? . 39)) c (c pre c (c code c (c (c class c (? . 72))) c (? . 78) c (u . "\n\n") c "extension NSNumber {" c (u . "\n") c (? . 0) c "func stringOfMinutesSeconds () -> NSString{" c (u . "\n") c (? . 5) c "if (integerValue < 0) {" c (u . "\n") c (? . 33) c "return \"00:00\"" c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 5) c "let m = integerValue / 60" c (u . "\n") c (? . 5) c "let s = integerValue % 60" c (u . "\n") c (? . 5) c "return NSString(format: \"%02d:%02d\", m, s)" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (c p c (? . 202) c (c code c (? . 139)) q " method, we change to the following code:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 140) c (u . "\n") c (? . 0) c (? . 143) c (u . "\n\n") c (? . 0) c (? . 144) c (u . "\n") c (? . 40)))) c (q li "Try to run the app. Add 30 seconds and press start. We can now see the timer label is counting down.") c (c li c (c p c "We can improve the " c (c code c (? . 139)) q " method. Replace the tick method with the following code:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 140) c (u . "\n") c (? . 0) c (? . 299) c (u . "\n") c (? . 0) c (? . 300) c (u . "\n") c (? . 5) c (? . 301) c (u . "\n") c (? . 5) c (? . 136) c (u . "\n") c (? . 5) c (? . 141) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c (? . 142) c (u . "\n\n") c (? . 0) c (? . 143) c (u . "\n\n") c (? . 0) c (? . 144) c (u . "\n") c (? . 40))))) c (c div c (c h2 c (c (c id c (? . 170))) c (c a c (c (c href c (? . 171))) c (? . 172))) q (p (li "Swift automatically bridges Double, Integer, Bool into NSNumber. But it won’t automatically cast it.") (br) (li "We have cast the NSString into String for UILabel text.") (br) (li "Extensions is similar to " (code "Category") " in Objective-C.")))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step7-timer-format.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/list-view.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "List View") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/big-button-3609a3a937e4157828a54871e9773a0f.png") c (c alt c (? . 145))))) c (c figcaption c (? . 145)))) c (q p "Mobile devices are often in narrow size and most of the users hold the device in portrait. So when we provides information or options for mobile device, we may use list view.") c (q p "In iOS, it's called table view.") c (q p "Here are some screenshots showing how iOS uses table view to display both information and configuration.") c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/ios-table-view-2-ea847ff0b31bc0eef7fc95823002f7b7.png") c (c alt c (? . 146))))) c (c figcaption c (? . 146))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/ios-table-view-3-1abd1a9b733c35eae1072f1d5aa1f1c5.png") c (c alt c (? . 147))))) c (c figcaption c (? . 147))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/list-view.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/foundation-grid.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Foundation grid") c (q p "Foundation uses row and columns approach for the layout.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/row-column-grid-6113c4d65e2f9513a6603b7999c5adb4.png") c (c alt c (? . 148))))) c (c figcaption c (? . 148)))) c (q p (strong "Rows") " are the space lay out from top to bottom.") c (q p (strong "Columns") " are the space inside each row, lay out fro left to right.") c (q p "If the content are meant to be inside the grid system, make sure we put the content inside column and columns inside row.") c (q p "The columns order from left to right following the order of the divs by default. we may change the order by using push and pull classes where we will discuss very soon.") c (q p "Here is a demo for the basic grid.") c (c pre c (c code c (c (c class c (? . 4))) c (? . 149) c (u . "\n") c (? . 0) c "<div class='small-3 columns'>Left Nav Bar</div>" c (u . "\n") c (? . 0) c (? . 176) c (u . "\n") c (? . 6))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/grid-basic-wide-ea67aeb5f8c9a58dcde55d9189fd88dd.png") c (c alt c (? . 150))))) c (c figcaption c (? . 150))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/grid-basic-narrow-763e82ec1a73b0553c8c78f774d95c79.png") c (c alt c (? . 151))))) c (c figcaption c (? . 151))) c (q p "After we add the medium columns setting, the propotional varies between small and medium screen.") c (c pre c (c code c (c (c class c (? . 4))) c (? . 149) c (u . "\n") c (? . 0) c "<div class='small-6 medium-3 columns'>Left Nav Bar</div>" c (u . "\n") c (? . 0) c "<div class='small-6 medium-9 columns'>Content</div>" c (u . "\n") c (? . 6))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/medium-grid-wide-1e064346710175bcfd2edd49a39d8c38.png") c (c alt c (? . 150))))) c (c figcaption c (? . 150))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/medium-grid-small-12bb8ad1a861a74d8b421582c141766e.png") c (c alt c (? . 151))))) c (c figcaption c (? . 151))) c (q p (a ((href "http://jsfiddle.net/makzan/1ncwbwoa/")) "Open example in jsfiddle.")) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/small-n-3a089deccd0465967a4b9c9a779d6d88.png") c (c alt c (? . 152))))) c (c figcaption c (? . 152)))) c (c p c "Foundation is mobile first. Zurb Foundation uses " c (q code "small-N") c (? . 153) c (c code c (? . 154)) c (? . 9) c (c code c (? . 155)) c " to define how many columns span for " c (q em "small") c (? . 153) c (q em "medium") c (? . 9) q (em "large") " screen. But only the small one is required, medium and large one is optional.") c (q p "When designing the grid in Zurb Foundation, we craft the grid for small screen first.") c (q p "If the grid for small screen work in larger size (medium and large), we don’t need to do anything and it will expand to the larger width until reaching the max width.") c (c p c "If we think we should devide the row into different columns when the screen is at medium or large size, we can further use the " c (c code c (? . 154)) c (? . 9) c (c code c (? . 155)) q " column class to define them.") q (p "We can even provide different proportion for the various screen sizes.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/foundation-grid.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/index.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Section 2—Mobile Web Design") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/mobile-web-design-52d8314974f7dd3ee1dc7ec529886937.png") c (c alt c (? . 156))))) c (c figcaption c (? . 156)))) q (p "In this course, we will explore different techniques to create our content in mobile web. We will focus on content strategy for mobile devices. We will try to fit our layout into small screen. We will make the form inputs fit the virtual keyboards in touch devices. We will fetch device data such as raw touches events and device orientation. Finally, we will pack and deploy our web.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/secrets/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc q root (h1 "Example Project—Secrets")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/secrets/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step4-select-seconds.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 4—Select seconds to schedule") c (c ol c (c li c "Add 2 IBActions. Link the " c (q code "touchUpInside") c " event of buttons of +30s and -30s to " c (c code c (? . 282)) c (? . 9) c (c code c (? . 283)) q " method.") c (c li c (c p c "Let’s move to " c (c code c (? . 77)) c " file. Add the " c (c code c (? . 157)) q " instanc variable to the class.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 290)))) c (c li c (q p "Implement the IBActions that manipulate the seconds value.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK: - Select seconds" c (u . "\n") c (? . 292) c (u . "\n") c (? . 0) c (? . 293) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 294) c (u . "\n") c (? . 0) c (? . 295) c (u . "\n") c (? . 40)))) c (c li c (c p c "We originally hard-coded the notification time interval to 30 seconds. Now we change the hard-coded value by using the instant variable " c (c code c (? . 157)) c (? . 39) q (br) "The old code:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 158) c (u . "\n") c (? . 0) c (? . 142) c (u . "\n") c (? . 0) c "LocalNotificationManager.sharedManager.scheduleNotificationWithInterval(30.0)" c (u . "\n") c (? . 40))) c (q p "Change to the following new code:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 158) c (u . "\n") c (? . 0) c (? . 142) c (u . "\n") c (? . 0) c (? . 224) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step4-select-seconds.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/do-mobile-web-has-to-be-website.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Do mobile web has to be a webpage?") c (q p (em "Content") " is what matters. Must the content be put in web page? Take a look at how Ikea turns instagram profile into a clickable “wabpage” with description, images and movie clips.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/ikea-on-instagram-2b3bbfc6173706c982d911dd3593063a.png") c (c alt c (? . 159))))) c (c figcaption c (? . 159)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/do-mobile-web-has-to-be-website.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/content-structure.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Content Structure") c (q p "The first step is not make your website fit in mobile. The first thing you should do is make your content fits in the mobile device.") c (q p "Remember, people don’t consume website. They consume content.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/article-extraction-e53fe89a49c9af7ab3f3ff1edbf4db76.png") c (c alt c (? . 160))))) c (c figcaption c (? . 160))) c (c h2 c (c (c id c (u . "article-view—broken-one"))) c (c a c (c (c href c (u . "#article-view—broken-one"))) q "Article view—Broken one")) c (q p "There is an article view in mobile Safari. The iOS parsed the web page and try to extract the content for a better reading experience.") c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/macao-portal-normal-ce63f22e8d690e098f9515c43e13cefc.png") c (c alt c (? . 161))))) c (c figcaption c (? . 161))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/macao-portal-article-6966ecea6f9fdf174a5e192ed68d45c6.png") c (c alt c (? . 162))))) c (c figcaption c (? . 162)))) c (q p "Notice that the important headline in the article is missing in the article view.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/macao-portal-pocket-af2d1f13e31acf3ae9e479a4772c2eea.png") c (c alt c (? . 163))))) c (c figcaption c (? . 163)))) c (q p "Moreover, most read-later service also supports content extraction. For example, the following screenshot shows how Pocket displays the content in its mobile app, with a good reading experience.") c (c h2 c (c (c id c (u . "article-view—woking-one"))) c (c a c (c (c href c (u . "#article-view—woking-one"))) q "Article view—Woking one")) c (q p "Here is another example:") c (c div c (c (c class c (? . 41))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/hk-news-normal-84a6d19be802b50030461757defb91db.png") c (c alt c (? . 161))))) c (c figcaption c (? . 161))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/hk-news-article-38bb650278711696552af9a73783ed15.png") c (c alt c (? . 162))))) c (c figcaption c (? . 162)))) c (c h2 c (c (c id c (u . "article-in-evernote"))) c (c a c (c (c href c (u . "#article-in-evernote"))) q "Article in Evernote")) c (q p "Similar article view is not only use in mobile but also desktop service, such as Evernote.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/evernote-bb008aed895536b3ff62ac4a085df31d.png") c (c alt c (? . 164))))) c (c figcaption c (? . 164))) q (p "So how we could make the system or service extract the content correctly?") (p "When we plan our HTML structure, we can make use of the <article> tag. Here is the explanation from Mozilla.") (blockquote "The HTML <article> Element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable, e.g., in syndication.") (p "It’s often confusing when deciding when to use the section tag and when to use the article tag.") (p "Good structure helps web service analysis your content.") (p "Two quotes from the w3 spec helping us to choose between section and article.") (blockquote "Authors are encouraged to use the article element instead of the section element when it would make sense to syndicate the contents of the element.") (blockquote "When an element is needed for styling purposes or as a convenience for scripting, authors are encouraged to use the div element instead. A general rule is that the section element is appropriate only if the element's contents would be listed explicitly in the document's outline.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/content-structure.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/index.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Chapter 2") (p "In this chapter, we focus on the fundamental of the web. It’s so fundamental that these techniques apply to both desktop web and mobile web design. It’s so fundamental that we often overlook and forget about it.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/document-title.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Document title") c (q p "First thing is the title of the document. Title of the document is used in the following places:") c (q ul (li "Home screen") (br) (li "Bookmark") (br) (li "History log") (br) (li "Tab") (br) (li "Back button in browser") (br) (li "Social network")) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/fb-sharing-6d9154db003a1668e3130cb407dd988d.png") c (c alt c (? . 165))))) c (c figcaption c (? . 165)))) c (q p "This screen shot of sharing a webpage on Facebook. Facebook fetches the document title when it is shared.") c (c p c "Actually Facebook searches for the " c (c code c (? . 166)) c " meta tag to restrieve the HTML document’s title and other information. If the " c (c code c (? . 166)) q " meta is missing, Facebook searches for the document title and heanding.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/macao-gov-history-dca0a7b80f9f6bd8b0edfadfa7c3c49c.png") c (c alt c (? . 167))))) c (c figcaption c (? . 167)))) c (q p "This screenshot shows how confuse it is when every page shares the same document title.") c (q p "Imagine now your reader would like to go back several pages in the history. For sure the reader will fails to identify which history item is the page that he is finding, because every page has the same title.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/makzan-net-history-e95b6f2bf8146faa685b4230819b5eb2.png") c (c alt c (? . 168))))) c (c figcaption c (? . 168)))) q (p "In this screenshot, on the other hand, shows the website with corresponding title set for each page. Every page has set a title that describes what the page is about. It also contains the site name so reader can easily identify these pages are from the same website when viewing them in the history log.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/document-title.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/secrets/step1-prototyping-in-storyboard.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc q root (h1 "Step 1—Prototyping the app in Storyboard")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/secrets/step1-prototyping-in-storyboard.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step9-handling-notification-event.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 9—Handling notification event") c (c ol c (c li c (q p "We handle the +30s action.") c (c pre c (c code c (c (c class c (? . 72))) c "func application(application: UIApplication, handleActionWithIdentifier identifier: String?, forLocalNotification notification: UILocalNotification, completionHandler: () -> Void) {" c (u . "\n\n") c (? . 0) c (? . 169) c (u . "\n") c (? . 40)))) c (c li c (q p "At last, we handle the notification when the app in running in foreground.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK: Notification Registration" c (u . "\n") c "func application(application: UIApplication, didReceiveLocalNotification notification: UILocalNotification) {" c (u . "\n\n") c (? . 0) c (? . 229) c (u . "\n\n") c (? . 0) c "// Alert" c (u . "\n") c (? . 0) c "let alert = UIAlertController(title: \"Alert\", message: \"Time’s up\", preferredStyle: UIAlertControllerStyle.Alert)" c (u . "\n") c (? . 0) c "alert.addAction(UIAlertAction(title: \"Dismiss\", style: UIAlertActionStyle.Cancel, handler: nil))" c (u . "\n") c (? . 0) c "alert.addAction(UIAlertAction(title: \"+30s\", style: UIAlertActionStyle.Default, handler: { (action) -> Void in" c (u . "\n") c (? . 33) c (? . 169) c (u . "\n") c (? . 0) c (? . 74) c (u . "\n\n") c (? . 0) c "UIApplication.sharedApplication().keyWindow?.rootViewController?.presentViewController(alert, animated: true, completion: nil)" c (u . "\n") c (? . 40))))) c (c div c (c h2 c (c (c id c (? . 170))) c (c a c (c (c href c (? . 171))) c (? . 172))) c (c p c (c li c (q p "The notification action actually works in Apple Watch automatically:") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/IMG_4564.PNG") c (c alt c (? . 173))))) c (c figcaption c (? . 173))))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step9-handling-notification-event.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/apple-watch.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (c h1 c (? . 174)) c (c p c "What we can do on " c (c em c (? . 174)) q "?") c (q p "Basically 3 thing:") c (q p "- Notification" (br) "- Glimpse" (br) "- App") c (c h2 c (q (id "notification")) c (c a c (c (c href c (u . "#notification"))) q "Notification")) c (q p "The iOS automatically routes all notifications to the watch, even that app hasn’t added any Apple Watch specific functionality.") c (c h2 c (q (id "glimpse")) c (c a c (c (c href c (u . "#glimpse"))) q "Glimpse")) c (q p "A glimpse is a non-interaction view that provides essential information for the watch user.") c (c h2 c (q (id "app")) c (c a c (c (c href c (u . "#app"))) q "App")) c (c p c "App is like entension of the iPhone app, where we call it " c (q strong "master app") c (? . 39))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/apple-watch.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/push-and-pull-column.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Push and pull columns") c (q p "A special push and pull class allows us to change the order of the columns.") c (c p c (c a c (q (href "http://jsfiddle.net/makzan/7vgsnxo0/")) c (? . 7))) c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/push-pull-sidebar-right-5953c64eacf0ffd9a4b251271251bf51.png") c (c alt c (? . 175))))) c (c figcaption c (? . 175))) c (c pre c (c code c (c (c class c (? . 4))) c (? . 149) c (u . "\n") c (? . 0) c (? . 176) c (u . "\n") c (? . 0) c (? . 177) c (u . "\n") c (? . 6))) c (q p "What if we want to put the sidebar on the left? Instead of moving the sidebar content in front of the main content, we change their ordering in CSS.") c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/push-pull-sidebar-left-21b73bfabdae74ecce5fa80b8fadfc95.png") c (c alt c (? . 178))))) c (c figcaption c (? . 178))) c (c pre c (c code c (c (c class c (? . 4))) c (? . 149) c (u . "\n") c (? . 0) c "<div class='small-9 small-push-3 columns'>Content</div>" c (u . "\n") c (? . 0) c "<div class='small-3 small-pull-9 columns'>Sidebar</div>" c (u . "\n") c (? . 6))) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/push-pull-9fd0ab8adef76abd004982bbea02846c.png") c (c alt c (? . 179))))) c (c figcaption c (? . 179)))) q (p "HTML defines the order of the content. The order shows how important the content is. More important content are placed before other content.") (p "When we float the columns from left to right. It follows the order of the column divs.") (p "For instance, if we want to swap the side bar from right to left, we can either change the HTML or we can change the CSS class by using this foundation class. Both code result in the same output visually. So what is the difference?") (p "The difference is that the foundation class solution doesn't change the order of the HTML element. We keep the same definition that content is more important than the side bar. But visually, we have our choice to define whether the side bar goes to the left or right side visually.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/push-and-pull-column.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step3-local-notification.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 3—Local Notification") c (q p "We use LocalNotification to schedule the time up message.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-18%20at%2012.19.57%20PM.png") c (c alt c (? . 180))))) c (c figcaption c (? . 180)))) c (q p "The usage of local notification:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 181))) c (q h2 ((id "time-for-action")) (a ((href "#time-for-action")) (string-append "Time for Action—" "Creating LocalNotificationManager"))) c (c ol c (c p c (c li c (? . 218) c (q code "LocalNotificationManager.swift") c (? . 39))) c (c p c (c li c (q p "Add the following singleton declaration to the class:") c (c pre c (c code c (c (c class c (? . 72))) q "static let sharedManager = LocalNotificationManager()")))) c (c p c (c li c (q p "Before scheduling any notifications, we need to grant the permission from the user. We define the following function that register the notification and defining the notification actions.") c (c pre c (c code c (c (c class c (? . 72))) c "func registerNotification() {" c (u . "\n") c (? . 5) c "// type" c (u . "\n") c (? . 5) c "let type = UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound" c (u . "\n\n") c (? . 5) c "// actions" c (u . "\n") c (? . 5) c "let action1 = UIMutableUserNotificationAction()" c (u . "\n") c (? . 5) c (? . 184) c (u . "\n") c (? . 5) c (? . 185) c (u . "\n") c (? . 5) c (? . 186) c (u . "\n") c (? . 5) c (? . 187) c (u . "\n") c (? . 5) c (? . 188) c (u . "\n\n\n") c (? . 5) c "// action category" c (u . "\n") c (? . 5) c "let category = UIMutableUserNotificationCategory()" c (u . "\n") c (? . 5) c "category.identifier = \"EXTRA_TIME_CATEGORY\"" c (u . "\n") c (? . 5) c "category.setActions([action1], forContext: UIUserNotificationActionContext.Default)" c (u . "\n") c (? . 5) c "category.setActions([action1], forContext: UIUserNotificationActionContext.Minimal)" c (u . "\n\n") c (? . 5) c "// setting" c (u . "\n") c (? . 5) c "let setting = UIUserNotificationSettings(forTypes: type, categories: [category])" c (u . "\n\n") c (? . 5) c "// really register" c (u . "\n") c (? . 5) c "UIApplication.sharedApplication().registerUserNotificationSettings(setting)" c (u . "\n") c (? . 40))))) c (c p c (c li c (q p "We define the following function that really schedule the local notification.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK: - Scheduling notification" c (u . "\n\n") c "func scheduleNotificationWithInterval(seconds:NSTimeInterval) {" c (u . "\n") c (? . 5) c "let notification = UILocalNotification()" c (u . "\n") c (? . 5) c "notification.fireDate = NSDate(timeIntervalSinceNow: seconds)" c (u . "\n") c (? . 5) c "notification.timeZone = NSTimeZone.defaultTimeZone()" c (u . "\n") c (? . 5) c "notification.alertBody = \"Time’s up\"" c (u . "\n") c (? . 5) c "notification.alertAction = \"Dismiss\"" c (u . "\n") c (? . 5) c "notification.soundName = UILocalNotificationDefaultSoundName" c (u . "\n") c (? . 5) c "notification.applicationIconBadgeNumber = 0" c (u . "\n") c (? . 5) c "notification.category = \"EXTRA_TIME_CATEGORY\"" c (u . "\n\n") c (? . 5) c (? . 181) c (u . "\n") c (? . 40))))) c (c p c (c li c (q p "Then we add the following 2 functions that manage existing notifications.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK: - Managing existing notifications" c (u . "\n\n") c "func hasNotifications() -> Bool {" c (u . "\n") c (? . 5) c "return UIApplication.sharedApplication().scheduledLocalNotifications.count > 0" c (u . "\n") c (? . 40) c (u . "\n\n") c "func removeAllNotifications() {" c (u . "\n") c (? . 5) c "UIApplication.sharedApplication().cancelAllLocalNotifications()" c (u . "\n") c (? . 40))))) c (c p c (c li c (q p "At last, we prompt the user for registration.") c (c pre c (c code c (c (c class c (? . 72))) c "// register notification" c (u . "\n") q "LocalNotificationManager.sharedInstance.registerNotification()"))))) c (c h2 c (c (c id c (u . "what-just-happened?"))) c (c a c (c (c href c (u . "#what-just-happened?"))) c (? . 133))) c (q p "We just scheduled a local notification that alerts in exactly 30 seconds. The alert time is calculate by system to ensure its precision. Another benefit to use notification is that it allows the user to switch to another app during the counting. The user can even kill the app or restart the iPhone. This is a system level scheduling that the alert triggers except the app get deleted or the device is shut down.") c (q p "We can add extra logic to notification by providing categories, which each " (em "category") " contains a couple of actions.") c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/IMG_0274.jpg") c (c alt c (? . 182))))) c (c figcaption c (? . 182)))) c (c p c "There are several properties that we define an " c (c em c (? . 183)) q ". Here is the code we wrote:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 184) c (u . "\n") c (? . 185) c (u . "\n") c (? . 186) c (u . "\n") c (? . 187) c (u . "\n") c (? . 188))) c (c p c (c terms c (c li c (q strong "identifier") c (? . 189) q "A unique string that the system identifies the action.") c (q br) c (c li c (q strong "title") c (? . 189) q "The string that is visible to user.") c (q br) c (c li c (q strong "activationMode") c (? . 189) c "Define if the logic needs to bring the app to " c (q em "foreground") c " or can keep the app executes the logic in " c (q em "background") c (? . 39)) c (q br) c (c li c (q strong "destructive") c (? . 189) q "A " (em "true") " value gives the action button a " (em "Red") " background.") c (q br) c (c li c (q strong "authenticationRequired") c (? . 189) q "Can user executes this action logic without unlocking the iPhone?"))) c (c p c "We will handle the action with our customize logic later. Now we have completed the basic local notification functionality. In next step, we’ll work on the " c (q em "+30s") c (? . 9) q (em "-30s") " buttons.") c (c div c (c h2 c (c (c id c (? . 170))) c (c a c (c (c href c (? . 171))) c (? . 172))) c (c p c (c li c "There is no difference in user’s view for " c (q em "remote notification") c (? . 9) q (em "local notification")) q (br) (li "We should carefully design when to prompt user for the notification permission. Asking the permission in wrong timing may result in deny.") (br) (li "There is no way to programmatically trigger the prompt again after deny. User need to manuanlly turn on notification for your app inside the OS setting app.")))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step3-local-notification.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step7-polishing-photo-fetching-logic.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 7—Polishing photo fetching logic") c (q p "We built all the core logic to make the app works. Now we want to polish the photo fetching logic.") c (c ol c (c li c (q p "We define an instant variable that stores the pre-fetched last photo.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 190)))) c (c li c (q p "We prepare a function to ask for the permission.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 191) c (u . "\n") c (? . 0) c (? . 192) c (u . "\n") c (? . 5) c (? . 193) c (u . "\n") c (? . 33) c (? . 194) c (u . "\n") c (? . 83) c (? . 87) c (u . "\n") c (? . 33) c (? . 40) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (q p "We want to preload the photo. Define the following function:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 195) c (u . "\n") c (? . 0) c (? . 86) c (u . "\n") c (? . 5) c (? . 196) c (u . "\n") c (? . 33) c (? . 197) c (u . "\n") c (? . 5) c (? . 73) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (q p "One more step. The last photo may have changed since") c (c pre c (c code c (c (c class c (? . 72))) c (? . 198) c (u . "\n") c (? . 0) c (? . 86) c (u . "\n") c (? . 5) c (? . 199) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (q p "Add the protocol to the class header. The header becomes:") c (c pre c (c code c (c (c class c (? . 72))) q "class ViewController: UIViewController, UITextViewDelegate, PHPhotoLibraryChangeObserver"))) c (c li c (c p c "Implement the " c (q code "photoLibraryDidChange") c (? . 200)) c (c pre c (c code c (c (c class c (? . 72))) c (? . 201) c (u . "\n") c (? . 0) c (? . 87) c (u . "\n") c (? . 40)))) c (c li c (c p c (? . 202) c (c code c (? . 203)) c ", we add the functions we just created. The " c (c code c (? . 203)) q " becomes the following:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 127) c (u . "\n") c (? . 0) c (? . 128) c (u . "\n") c (? . 0) c (? . 129) c (u . "\n\n") c (? . 0) c (? . 130) c (u . "\n\n") c (? . 0) c (? . 131) c (u . "\n\n") c (? . 0) c (? . 132) c (u . "\n\n") c (? . 0) c (? . 204) c (u . "\n\n") c (? . 0) c (? . 205) c (u . "\n\n") c (? . 0) c (? . 206) c (u . "\n") c (? . 40)))) c (c li c (q p "Now in the " (code "longPressSaveThought") " function, after user selects “Save with Last Photo”, we don’t fetch the photo anymore, instead, we use it:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 207) c (u . "\n") c (? . 0) c (? . 86) c (u . "\n") c (? . 5) c (? . 208) c (u . "\n") c (? . 0) c (? . 101) c (u . "\n") c (? . 5) c (? . 209) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 210) c (u . "\n") c (? . 0) c (? . 211) c (u . "\n") c (? . 40)))) c (c li c (c p c (? . 291) c (q code "promptForPhotoFailing") c (? . 9) q (code "promptForApprovalAgain") " is 2 functions that prompts the user that photo fetching fails.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 212) c (u . "\n") c (? . 0) c (? . 213) c (u . "\n") c (? . 0) c (? . 90) c (u . "\n") c (? . 0) c (? . 89) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 214) c (u . "\n") c (? . 0) c (? . 215) c (u . "\n") c (? . 0) c (? . 90) c (u . "\n") c (? . 0) c (? . 89) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step7-polishing-photo-fetching-logic.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/interchangable-content.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Interchangable content") c (q p "Responsive design comes with a downside: It wastes (mobile data) bandwidth if a lot of information is hidden in small screen. And it slows down the page loading.") c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/interchangable-5d1c90ac6ff5e183f9e07a8e310c2b9d.png") c (c alt c (? . 216))))) c (c figcaption c (? . 216)))) c (q p "An optimal way to archive the same effect is by using interchange. We use javascript to load the image at the size that fits the reader's screen. Smaller image for small screen. Higher resolution image for larger screen. The readers only need to load what they are going to read. They should never load something that they don't see and use.") c (q p "The reason we need to interchange content is because of the loading bandwidth. In the visibility section, we show and hide content based on the screen size. But the reader have to download all the content. Assuming the reader is reading on mobile but we load a large image for large screen reader. Then the mobile reader needs to download a high resolution image with the cecular data but never see this image.") c (c pre c (c code c (c (c class c (? . 4))) c "<img data-interchange=\"[/path/to/default.jpg, (default)], [/path/to/bigger-image.jpg, (large)]\">" c (u . "\n") q "<noscript><img src=\"/path/to/default.jpg\"></noscript>")) c (q p "Demo:") c (c p c (c iframe c (c (c seamless c (? . 217)) q (src "http://jsfiddle.net/makzan/XFye6/embedded/result/")))) c (q p "Foundation website provides a detailed tutorial on using the interchangable content in different scenarios. Ensure to check it out.") c (c h2 c (c (c id c (u . "exercise"))) c (c a c (c (c href c (u . "#exercise"))) c (? . 76))) q (p (a ((href "http://jsfiddle.net/makzan/hLHBu/")) "Exercise: Try to define 2 sizes of image for the header."))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/interchangable-content.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/setting-up-the-development-environment.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (c h1 c (? . 231)) q (p "How can we get started?") (p "We need to install some softwares. We need web browsers to run the web. We’ll need Google Chrome, Mozilla Firefox and Apple Safari to test our web pages.") (p "Just the browsers? How about the editor?") (aside "There are free alternatives: Bracket, Atom.io, or online IDE such as c9.io and Nitrous.") (p "Any plain text code editor would work. IDE such as Dreamweaver may be used but they are not required. For me, I would use Sublime Text because of the multiple-cursors feature.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/setting-up-the-development-environment.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step5-implement-mztimer.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 5—Implementing MZTimer") c (c p c "In this step, we implement the timer utility class. We call it " c (c code c (? . 219)) c ". It comes with a mutable companion—" c (c code c (? . 223)) c (? . 39)) c (c ol c (c li c (? . 218) c (c code c (? . 287)) c (? . 39)) c (c li c (? . 218) c (q code "MZMutableTimer.swift") c ", which extends the " c (c code c (? . 219)) c (? . 220)) c (c li c (q p "We define the following string constant for the " (code "NSUserDefaults") " key.") c (c pre c (c code c (c (c class c (? . 72))) c "let TIMER_START_AT_KEY = \"TimerStartedAt\"" c (u . "\n") q "let TIMER_DURATION_KEY = \"TargetDuration\""))) c (c li c (c p c "Then we implement the following " c (c code c (? . 219)) c (? . 220)) c (c pre c (c code c (c (c class c (? . 72))) c "class MZTimer: NSObject {" c (u . "\n") c (? . 0) c "static let sharedTimer = MZTimer()" c (u . "\n\n") c (? . 0) c (? . 288) c (u . "\n") c (? . 5) c "return NSUserDefaults.standardUserDefaults()" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func isRunning() -> Bool {" c (u . "\n") c (? . 5) c (? . 221) c (u . "\n") c (? . 5) c "if ((userDefault.objectForKey(TIMER_START_AT_KEY)) != nil) {" c (u . "\n") c (? . 33) c (? . 226) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 5) c "return false" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func elapsedSeconds() -> NSTimeInterval {" c (u . "\n") c (? . 5) c (? . 221) c (u . "\n\n") c (? . 5) c "if (userDefault.objectForKey(TIMER_START_AT_KEY) == nil) {" c (u . "\n") c (? . 33) c (? . 222) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c "let startedAt = userDefault.objectForKey(TIMER_START_AT_KEY) as! NSDate" c (u . "\n\n") c (? . 5) c "return startedAt.timeIntervalSinceNow" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func targetDuration() -> NSTimeInterval {" c (u . "\n") c (? . 5) c (? . 221) c (u . "\n\n") c (? . 5) c "if (userDefault.objectForKey(TIMER_DURATION_KEY) == nil) {" c (u . "\n") c (? . 33) c (? . 222) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n\n") c (? . 5) c "return userDefault.objectForKey(TIMER_DURATION_KEY) as! NSTimeInterval" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func remainSeconds() -> NSTimeInterval {" c (u . "\n") c (? . 5) c (? . 230) c (u . "\n") c (? . 5) c "let targetDuration = MZTimer.sharedTimer.targetDuration()" c (u . "\n") c (? . 5) c "return targetDuration - elapsedSeconds" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (c p c (? . 264) c (c code c (? . 223)) c " class which inherits the " c (c code c (? . 219)) q ". This class handles all the local notification’s scheduling and canceling.") c (c pre c (c code c (c (c class c (? . 72))) c "class MZMutableTimer: MZTimer {" c (u . "\n") c (? . 0) c "static let sharedMutableTimer = MZMutableTimer()" c (u . "\n\n") c (? . 0) c "func scheduleAlertForSeconds(seconds:NSTimeInterval) {" c (u . "\n") c (? . 5) c (? . 225) c (u . "\n") c (? . 5) c (? . 224) c (u . "\n\n") c (? . 5) c (? . 221) c (u . "\n") c (? . 5) c "userDefault.setObject(NSDate(), forKey: TIMER_START_AT_KEY)" c (u . "\n") c (? . 5) c "userDefault.setDouble(seconds, forKey: TIMER_DURATION_KEY)" c (u . "\n") c (? . 5) c "userDefault.synchronize()" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func cancelAlerts() {" c (u . "\n") c (? . 5) c (? . 225) c (u . "\n\n") c (? . 5) c (? . 221) c (u . "\n") c (? . 5) c "userDefault.removeObjectForKey(TIMER_START_AT_KEY)" c (u . "\n") c (? . 5) c "userDefault.removeObjectForKey(TIMER_DURATION_KEY)" c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c "func cancelAlertsIfZero() {" c (u . "\n") c (? . 5) c "if (remainSeconds() <= 0) {" c (u . "\n") c (? . 33) c "cancelAlerts()" c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))) c (c li c (c p c "We want to reset the timer if the counting is done while the application is in background. In the " c (q code "AppDelegate") c ", we tell the " c (c code c (? . 223)) q " to reset any alerts if the count down has completed.") c (c pre c (c code c (c (c class c (? . 72))) c "func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {" c (u . "\n") c (? . 0) c "// Override point for customization after application launch." c (u . "\n\n") c (? . 0) c (? . 227) c (u . "\n\n") c (? . 0) c (? . 226) c (u . "\n") c (? . 40))) c (c pre c (c code c (c (c class c (? . 72))) c "func applicationDidBecomeActive(application: UIApplication) {" c (u . "\n") c (? . 0) c (? . 227) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step5-implement-mztimer.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step6-using-mztimer.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 6—Using MZTimer") c (c p c "We implemented the " c (c code c (? . 219)) c (? . 9) c (c code c (? . 223)) q ", now we use it in our application.") c (c ol c (c li c (c p c "We connect the label into code as " c (c code c (? . 281)) q " IBOutlet.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 289)))) c (c li c (c p c "Inside " c (c code c (? . 203)) c (? . 39)) c (c pre c (c code c (c (c class c (? . 72))) c "if (MZTimer.sharedTimer.isRunning()) {" c (u . "\n") c (? . 0) c (? . 142) c (u . "\n") c (? . 210) c (u . "\n") c (? . 0) c (? . 136) c (u . "\n") c (? . 40)))) c (c li c (c p c "For the " c (q code "startTimer") c (? . 9) c (q code "cancelTimer") c ", we prepare the user interface and setup the timer via the " c (c code c (? . 223)) c (? . 220)) c (c pre c (c code c (c (c class c (? . 72))) c (? . 158) c (u . "\n") c (? . 0) c (? . 142) c (u . "\n") c (? . 0) c (? . 304) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 228) c (u . "\n") c (? . 0) c (? . 136) c (u . "\n") c (? . 0) c (? . 229) c (u . "\n") c (? . 40)))) c (c li c (c p c "Then we define a " c (q code "NSTimer") c " that change the interface constantly. Note that this logic only affects the interface. The actually counting logic is done via the " c (c code c (? . 219)) q " and local notification.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 296) c (u . "\n") c (? . 297) c (u . "\n") c (? . 0) c (? . 298) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 140) c (u . "\n") c (? . 0) c (? . 230) c (u . "\n\n") c (? . 0) c "NSLog(\"%02.0f\", elapsedSeconds)" c (u . "\n\n") c (? . 0) c "countDownLabel.text = NSString(format: \"%02.0f\", elapsedSeconds) as String" c (u . "\n\n") c (? . 0) c "// TODO: make the counting format nicer." c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step6-using-mztimer.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/another-autolayout-example.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Another AutoLayout example")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/another-autolayout-example.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Chapter 1–Getting started") c (c ol c (c li c (c a c (q (href "/mobile-web/chapter-1/setting-up-the-development-environment.html")) c (? . 231))) c (c li c (c a c (q (href "/mobile-web/chapter-1/testing-environment.html")) c (? . 232))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-1/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/2015-05-01-mobile-web-design.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Start writing the Mobile Web Design") c (q p "I’m start migrating the mobile web design course from makzan.net to here. This site will be the central place for all my mobile design writings, including both web design and app development.") c (c p c "I believe both mobile app developers and traiditonal web designers need to learn these 2 aspects—" c (q strong "Mobile web design") c (? . 9) c (q strong "native app development") c (? . 39)) q (p (history "2015-05-01: First draft." (br) "2015-05-20: Added chapter 3 content."))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/logs/2015-05-01-mobile-web-design.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Section 1—iOS App Development") c (q p "It’s not that difficult to build an iOS application. The latest XCode makes app development straightforward.") c (q p "In this section, we will explore different examples that introduces essential iOS app building skills, from easy to more advonce ones.") c (c h2 c (c (c id c (u . "beginning-level"))) c (c a c (c (c href c (u . "#beginning-level"))) q "Beginning level")) c (c h2 c (c (c id c (u . "advanced-topics"))) c (c a c (c (c href c (u . "#advanced-topics"))) q "Advanced topics")) c (c ol c (c li c (c a c (c (c href c (? . 234))) c (? . 235))) c (c li c (c a c (c (c href c (? . 236))) c (? . 237))) c (c li c (c a c (c (c href c (? . 238))) c (? . 239))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/index.html.pm" . unix) h ! (equal) (mod-time . 1434343828) (doc c root c (q h1 "Mobile Design Class") c (c p c "You’ll find 3 topics in this " c (q em "mobile design class") c ". They are " c (q strong "mobile web design") c (? . 153) c (q strong "iOS app development") c (? . 9) c (c strong c (? . 240)) q ". You may read the online version for " (em "free") ", or you may buy the eBook edition.") c (q p "The course was originally hosted on " (a ((href "http://makzan.net")) "makzan.net") ". I’m migrating and updating the content into this domain.") c (q p "Why there are 3 topics? It’s because they are deeply connected. If you want to design for mobile screens, you need the native UI components to build iOS apps. You need mobile web design skills to create hybrid app that runs both native code and web view code. You also need to learn mobile user interface design to provide a better user experience.") c (c ol c (c li c (c a c (q (href "/ios-app/")) c (c p c (? . 233)) c (c ol c (c li c (c a c (c (c href c (? . 234))) c (? . 235))) c (c li c (c a c (c (c href c (? . 236))) c (? . 237))) c (c li c (c a c (c (c href c (? . 238))) c (? . 239)))))) c (c li c (c a c (q (href "/mobile-web/")) c (? . 156))) c (c li c (c a c (q (href "#")) c (? . 240))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/index.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/centered-column.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Centered column") c (c p c "We can center a column by using the " c (c code c (? . 242)) c (? . 220)) c (c aside c (c figure c (c p c (c img c (c (q src "http://makzan.net/assets/mobile-web-design/centered-column-1c670ec81b55a7103a053d4ae9d180e8.png") c (c alt c (? . 241))))) c (c figcaption c (? . 241)))) c (q p "Here is a demo on centered column.") c (c p c "As same as the grid, there is " c (q code "medium-centered") c (? . 9) c (q code "large-centered") c " class. We don’t need the medium and large because they will inherit the " c (c code c (? . 242)) q " class if we hasn’t specify.") c (c p c "If we want to un-center a column in specific screen size, we can use the " c (q code "medium-uncentered") c (? . 9) c (q code "large-uncentered") c (? . 39)) c (c p c (c a c (q (href "http://jsfiddle.net/makzan/5ww8u5c1/")) c (? . 7))) c (q p "HTML") c (c pre c (c code c (c (c class c (? . 4))) c "<div class='header-bg'>" c (u . "\n") c (? . 0) c (? . 149) c (u . "\n") c (? . 5) c "<div class='small-6 small-centered columns'>Big Title Here</div>" c (u . "\n") c (? . 0) c (? . 6) c (u . "\n") c (? . 6))) c (q p "CSS") c (c pre c (c code c (c (c class c (? . 243))) c ".header-bg {" c (u . "\n") c (? . 0) c "background: url(http://placekitten.com/1000/500) center center;" c (u . "\n") c (? . 0) c "background-size: cover;" c (u . "\n") c (? . 0) c "background-attachment: fixed;" c (u . "\n") c (? . 0) c "padding: 3em;" c (u . "\n") c (? . 40) c (u . "\n\n") c ".columns {" c (u . "\n") c (? . 0) c "background: rgba(255, 255, 255, .5);" c (u . "\n") c (? . 0) c "border: 1px solid blue;" c (u . "\n") c (? . 0) c "padding-top: 1em;" c (u . "\n") c (? . 0) c "padding-bottom: 1em;" c (u . "\n") c (? . 0) c "margin-bottom: 1em;" c (u . "\n") c (? . 40)))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-3/centered-column.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step2-handle-keyboard-size.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Handling keyboard size changes") c (c p c "We assumed you’re using Autolayout and you have created a constraint named " c (c code c (? . 244)) q " which is distance between bottom of save button and bottom of the view controller.") c (c ol c (c li c (c p c (? . 202) c (c code c (? . 77)) q " file, add the following code:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 245) c (u . "\n\n") c (? . 246) c (u . "\n\n") c (? . 0) c (? . 247) c (u . "\n") c (? . 0) c (? . 248) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 249) c (u . "\n") c (? . 0) c (? . 250) c (u . "\n\n") c (? . 0) c "self.bottomMargin.constant = keyboardRect!.size.height" c (u . "\n") c (? . 0) c (? . 102) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 251) c (u . "\n") c (? . 0) c "self.bottomMargin.constant = 0" c (u . "\n") c (? . 0) c (? . 102) c (u . "\n") c (? . 40)))) c (c li c (c p c "Then we call the keyboard events in the " c (c code c (? . 203)) q " function. We also focus on the text view by default, which shows the keyboard right after the app launches.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 127) c (u . "\n") c (? . 0) c (? . 128) c (u . "\n") c (? . 0) c (? . 131) c (u . "\n") c (? . 0) c (? . 132) c (u . "\n") c (? . 40))))) c (c h2 c (c (c id c (u . "what-just-happened?"))) c (c a c (c (c href c (u . "#what-just-happened?"))) c (? . 133))) c (q p "We listened to the keyborad’s frame changes and change our layout according to the keyboard’s state.") c (q p "The keyboard is controlled by the operating system. We can only detect it’s state changes by using the " (code "NSNotification") ". The system fires a " (code "UIKeyboardWillShowNotification") " when the keyboard shows, or changes frame. The system fires a " (code "UIKeyboardWillHideNotification") " when the keyboard hides.") c (q aside "UIKeyboardWillShowNotification event also fires when the keyboard changes it’s frame, e.g. toggling " (em "Predictive") " suggestions.") c (c p c "In the fired notification, we can get the frame before and after the change by using the " c (q code "UIKeyboardFrameBeginUserInfoKey") c (? . 9) c (q code "UIKeyboardFrameEndUserInfoKey") c ". It’s " c (q code "CGRect") c " wrapped inside " c (q code "NSValue") c " in order to be put inside " c (q code "Dictionary") c (? . 39)) q (p "At last, we called the " (code "view.layoutIfNeeded()") " to tell the view to update the layout immediately.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step2-handle-keyboard-size.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/mobile-first-approach.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Mobile First Approach") (p "We talk about mobile first. Mobile first means that during our website planning, we plan the content and layout for the mobile first.") (p "Planning for mobile first ensures us to consider the most important thing of our website.")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/mobile-web/chapter-2/mobile-first-approach.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step5-load-last-shared-text.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 5—Loading last shared text") c (c ol c (c li c "In the interface builder, we add a " c (q code "BarButtonItem") c " to the right side of the navigation bar. We give it a title " c (q em "“Load”") c (? . 39)) c (c li c "We link the action of the " c (q em "Load") c " button to the " c (c code c (? . 77)) c (? . 252) c (q code "loadText:") c (? . 39)) c (c li c (c p c (? . 253) c (c code c (? . 77)) q " file, we added a " (code "SAVED_TEXT_KEY") " constant. After that, we add the following constant.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 254)))) c (c li c (c p c (? . 202) c (c code c (? . 255)) c " function, we add the following code that stores the text into user defaults with key " c (q code "LAST_TEXT_KEY") c ". The " c (c code c (? . 255)) q " funciton becomes:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 256) c (u . "\n") c (? . 0) c (? . 257) c (u . "\n") c (? . 0) c (? . 88) c (u . "\n") c (? . 0) c (? . 258) c (u . "\n\n") c (? . 0) c (? . 259) c (u . "\n") c (? . 0) c (? . 103) c (u . "\n\n") c (? . 0) c (? . 260) c (u . "\n") c (? . 0) c (? . 261) c (u . "\n\n") c (? . 0) c (? . 262) c (u . "\n") c (? . 0) c (? . 263) c (u . "\n") c (? . 40)))) c (c li c (c p c (? . 264) q (code "loadText") " IBAction.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 265) c (u . "\n") c (? . 0) c (? . 266) c (u . "\n") c (? . 0) c (? . 267) c (u . "\n") c (? . 5) c (? . 268) c (u . "\n") c (? . 0) c (? . 101) c (u . "\n") c (? . 5) c (? . 269) c (u . "\n") c (? . 5) c (? . 270) c (u . "\n") c (? . 5) c (? . 271) c (u . "\n") c (? . 83) c (? . 272) c (u . "\n") c (? . 5) c (? . 74) c (u . "\n") c (? . 5) c (? . 273) c (u . "\n") c (? . 5) c (? . 274) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40) c (u . "\n") c (? . 275) c (u . "\n") c (? . 0) c (? . 88) c (u . "\n") c (? . 0) c (? . 276) c (u . "\n") c (? . 5) c (? . 277) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step5-load-last-shared-text.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step8-creating-today-extension.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 8—Creating today extension") c (q p "In this step, we create an extension for the app. We allow user to schedule a new timer via the today extension panel. We discuss how the extension app can share the same user defaults from the main app. We also go through how the extension invokes the main application.") c (c ol c (c li c (q p "Create a new target from the project.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.07.33%20PM.png") c (c alt c (? . 278))))) c (c figcaption c (? . 278)))) c (c li c (c p c "Choose " c (c em c (? . 279)) c (? . 39)) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.07.46%20PM.png") c (c alt c (? . 279))))) c (c figcaption c (? . 279))) c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.08.03%20PM.png") c (c alt c (? . 280))))) c (c figcaption c (? . 280)))) c (c li c (c p c "Then we design the interface for the Today extension. Make the interface like the following. The label is linked as " c (c code c (? . 281)) c " IBOutlet. The buttons are linked as " c (c code c (? . 282)) c (? . 153) c (c code c (? . 283)) c (? . 9) c (c code c (? . 303)) q " IBActions correspondingcally.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.45.01%20PM.png") c (c alt c (? . 284))))) c (c figcaption c (? . 284)))) c (c li c (q p "There is a left margin on the view content in today extension by default. We can reset this margin by using the following delegate method:") c (c pre c (c code c (c (c class c (? . 72))) c "func widgetMarginInsetsForProposedMarginInsets(defaultMarginInsets: UIEdgeInsets) -> UIEdgeInsets {" c (u . "\n") c (? . 0) c "return UIEdgeInsetsZero" c (u . "\n") c (? . 40)))) c (c li c (c aside c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.28.28%20PM.png") c (c alt c (? . 285))))) c (c figcaption c (? . 285)))) c (q p "For both parent app and the today extension app, we need to add them into the same App Group. The App Group is actually configured on Apple’s developer center. So Xcode may ask for your developer profile when turing this setting on. Choose a unique app group ID and use it in both parent app and today extension target.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.29.28%20PM.png") c (c alt c (? . 286))))) c (c figcaption c (? . 286)))) c (c li c (c p c (? . 202) c (c code c (? . 287)) q " file, we change the user default to the following, which specify the app group that we configured.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 288) c (u . "\n") c (? . 0) c "return NSUserDefaults(suiteName: \"group.net.makzan.KitchenTimer-Swift\")!" c (u . "\n") c (? . 40)))) c (c li c (q p "TodayViewController.swift:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 289)))) c (c li c (q p "Define an instant variable in the extension class.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 290)))) c (c li c (c p c (? . 291) c (c code c (? . 282)) c (? . 9) c (c code c (? . 283)) q " has the same logic as the main app.") c (c pre c (c code c (c (c class c (? . 72))) c "// MARK: - IBActions" c (u . "\n\n") c (? . 292) c (u . "\n") c (? . 0) c (? . 293) c (u . "\n") c (? . 40) c (u . "\n") c (? . 294) c (u . "\n") c (? . 0) c (? . 295) c (u . "\n") c (? . 40)))) c (c li c (q p "The interface timer is same as the main app.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 296) c (u . "\n") c (? . 297) c (u . "\n") c (? . 0) c (? . 298) c (u . "\n") c (? . 40) c (u . "\n\n") c (? . 140) c (u . "\n") c (? . 0) c (? . 299) c (u . "\n") c (? . 0) c (? . 300) c (u . "\n") c (? . 5) c (? . 301) c (u . "\n") c (? . 5) c (? . 141) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c (? . 143) c (u . "\n\n") c (? . 0) c (? . 144) c (u . "\n") c (? . 40)))) c (c li c (q p "Next, we create a connection between the extension and the main application. We do that by using the application URL scheme. Configure the main app with the following URL type.") c (q aside "Note: You may want to choose a different URL scheme because this scheme shares among all the iOS apps installed in the device.") c (c figure c (c p c (c img c (c (q src "https://dl.dropboxusercontent.com/u/3079250/Public%20for%20MobileDesignClass/ios/Screen%20Shot%202015-05-28%20at%202.16.08%20PM.png") c (c alt c (? . 302))))) c (c figcaption c (? . 302)))) c (c li c (c p c "When user presses " c (c em c (? . 303)) q " button in the extension, it actually launches the parent app by calling URL. Extension cannot invoke NSLocalNotification directly.") c (c pre c (c code c (c (c class c (? . 72))) c "@IBAction func start(sender: AnyObject) {" c (u . "\n") c (? . 0) c "let urlString = NSString(format: \"mz-kitchentimer://%.0f\", seconds) as String" c (u . "\n") c (? . 0) c "let url = NSURL(string: urlString)" c (u . "\n") c (? . 0) c "extensionContext?.openURL(url!, completionHandler: nil)" c (u . "\n") c (? . 40)))) c (c li c (c p c "Let’s move to the main app’s " c (q code "AppDelegate.swift") c " file. In the parent app, we handle the URL launching by using the " c (q code "application:handleOpenURL:") c " method. Inside the method, we capture the URL, which is the " c (c em c (? . 157)) q " passes from the extension. Then we setup a new timer from the value.") c (c pre c (c code c (c (c class c (? . 72))) c "func application(application: UIApplication, handleOpenURL url: NSURL) -> Bool {" c (u . "\n") c (? . 0) c "if (url.host != nil) {" c (u . "\n") c (? . 5) c "let seconds = (url.host! as NSString).doubleValue" c (u . "\n") c (? . 5) c (? . 304) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n") c (? . 0) c (? . 226) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/kitchen-timer/step8-creating-today-extension.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step4-basic-sharing-function.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc c root c (q h1 "Step 4—Basic Sharing Function") c (q p "In this step, we create the the core function—text sharing.") c (c ol c (c li c (q p "We define a function that share a given collection of items.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 305) c (u . "\n") c (? . 306) c (u . "\n") c (? . 0) c (? . 307) c (u . "\n\n") c (? . 0) c (? . 308) c (u . "\n") c (? . 0) c (? . 309) c (u . "\n\n") c (? . 0) c (? . 99) c (u . "\n") c (? . 0) c (? . 310) c (u . "\n\n") c (? . 0) c (? . 311) c (u . "\n\n") c (? . 5) c (? . 312) c (u . "\n") c (? . 5) c (? . 313) c (u . "\n") c (? . 33) c (? . 314) c (u . "\n") c (? . 5) c (? . 40) c (u . "\n") c (? . 0) c (? . 40) c (u . "\n\n") c (? . 0) c (? . 315) c (u . "\n") c (? . 0) c (? . 316) c (u . "\n") c (? . 40)))) c (c li c (q p "We need to define how we clean up the interface after a successful share. Define the following function:") c (c pre c (c code c (c (c class c (? . 72))) c (? . 256) c (u . "\n") c (? . 0) c (? . 259) c (u . "\n") c (? . 0) c (? . 103) c (u . "\n\n") c (? . 0) c (? . 260) c (u . "\n") c (? . 0) c (? . 261) c (u . "\n\n") c (? . 0) c (? . 262) c (u . "\n") c (? . 0) c (? . 263) c (u . "\n") c (? . 40)))) c (c li c (q p "Then we call the " (code "shareItems") " function in the save button’s IBAction handler.") c (c pre c (c code c (c (c class c (? . 72))) c (? . 317) c (u . "\n\n") c (? . 318) c (u . "\n") c (? . 0) c (? . 319) c (u . "\n") c (? . 40)))))) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/ios-app/quick-thoughts/step4-basic-sharing-function.html.pm"))) ((p+ #"/home/nitrous/books/MobileDesignClass.com/pollen-src/summary.html.pm" . unix) h ! (equal) (mod-time . 1434343663) (doc q root (h1 "Summary")) (metas h ! (equal) (here-path . "/home/nitrous/books/MobileDesignClass.com/pollen-src/summary.html.pm")))))